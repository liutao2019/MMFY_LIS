/// <XRTypeInfo>
///   <AssemblyFullName>DevExpress.XtraReports.v8.2, Version=8.2.2.0, Culture=neutral, PublicKeyToken=a6519d31830a2c3c</AssemblyFullName>
///   <AssemblyLocation>C:\Windows\assembly\GAC_MSIL\DevExpress.XtraReports.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraReports.v8.2.dll</AssemblyLocation>
///   <TypeName>DevExpress.XtraReports.UI.XtraReport</TypeName>
///   <Localization>zh-CHS</Localization>
///   <References>
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraReports.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraReports.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Design\2.0.0.0__b03f5f7f11d50a3a\System.Design.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Data.SqlXml\2.0.0.0__b77a5c561934e089\System.Data.SqlXml.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Security\2.0.0.0__b03f5f7f11d50a3a\System.Security.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\Microsoft.VisualC\8.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualC.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.DirectoryServices\2.0.0.0__b03f5f7f11d50a3a\System.DirectoryServices.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Runtime.Remoting\2.0.0.0__b77a5c561934e089\System.Runtime.Remoting.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.DirectoryServices.Protocols\2.0.0.0__b03f5f7f11d50a3a\System.DirectoryServices.Protocols.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.ServiceProcess\2.0.0.0__b03f5f7f11d50a3a\System.ServiceProcess.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Configuration.Install\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.Install.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization.Formatters.Soap\2.0.0.0__b03f5f7f11d50a3a\System.Runtime.Serialization.Formatters.Soap.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Windows.Forms\2.0.0.0__b77a5c561934e089\System.Windows.Forms.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\Accessibility\2.0.0.0__b03f5f7f11d50a3a\Accessibility.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Deployment\2.0.0.0__b03f5f7f11d50a3a\System.Deployment.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Web.RegularExpressions\2.0.0.0__b03f5f7f11d50a3a\System.Web.RegularExpressions.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Drawing.Design\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.Design.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Data.OracleClient\2.0.0.0__b77a5c561934e089\System.Data.OracleClient.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraPrinting.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraPrinting.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.Data.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.Data.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.Utils.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.Utils.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraTreeList.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraTreeList.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraEditors.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraEditors.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraRichTextEdit.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraRichTextEdit.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraBars.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraBars.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraPivotGrid.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraPivotGrid.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraPivotGrid.v8.2.Core\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraPivotGrid.v8.2.Core.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraNavBar.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraNavBar.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.XtraCharts.v8.2\8.2.2.0__a6519d31830a2c3c\DevExpress.XtraCharts.v8.2.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\DevExpress.Charts.v8.2.Core\8.2.2.0__a6519d31830a2c3c\DevExpress.Charts.v8.2.Core.dll" />
///   </References>
/// </XRTypeInfo>
namespace XtraReportSerialization {
    
    public class xtraReport11 : DevExpress.XtraReports.UI.XtraReport {
        private DevExpress.XtraReports.UI.DetailBand Detail;
        private DevExpress.XtraReports.UI.PageFooterBand PageFooter;
        private DevExpress.XtraReports.UI.XRLine xrLine3;
        private DevExpress.XtraReports.UI.XRLabel xrLabel5;
        private DevExpress.XtraReports.UI.XRLabel xrLabel24;
        private DevExpress.XtraReports.UI.XRLabel xrLabel35;
        private DevExpress.XtraReports.UI.XRLabel xrLabel12;
        private DevExpress.XtraReports.UI.XRLabel xrLabel34;
        private DevExpress.XtraReports.UI.XRLabel xrLabel33;
        private DevExpress.XtraReports.UI.XRLabel xrLabel9;
        private DevExpress.XtraReports.UI.XRLine xrLine1;
        private DevExpress.XtraReports.UI.XRLabel xrLabel70;
        private DevExpress.XtraReports.UI.XRPictureBox xrPictureBox2;
        private DevExpress.XtraReports.UI.XRLabel xrLabel72;
        private DevExpress.XtraReports.UI.XRLabel xrLabel69;
        private DevExpress.XtraReports.UI.XRLabel xrLabel68;
        private DevExpress.XtraReports.UI.XRLabel xrLabel64;
        private DevExpress.XtraReports.UI.XRLine xrLine7;
        private DevExpress.XtraReports.UI.XRLabel xrLabel63;
        private DevExpress.XtraReports.UI.XRLabel xrLabel62;
        private DevExpress.XtraReports.UI.XRLabel xrLabel60;
        private DevExpress.XtraReports.UI.XRLabel xrLabel59;
        private DevExpress.XtraReports.UI.XRLabel xrLabel27;
        private DevExpress.XtraReports.UI.PageHeaderBand PageHeader;
        private DevExpress.XtraReports.UI.XRLabel xrLabel4;
        private DevExpress.XtraReports.UI.XRLabel xrLabel1;
        private DevExpress.XtraReports.UI.XRLabel xrLabel36;
        private DevExpress.XtraReports.UI.XRLabel xrLabel29;
        private DevExpress.XtraReports.UI.XRLabel xrLabel31;
        private DevExpress.XtraReports.UI.XRLabel xrLabel20;
        private DevExpress.XtraReports.UI.XRLabel xrLabel21;
        private DevExpress.XtraReports.UI.XRLabel xrLabel25;
        private DevExpress.XtraReports.UI.XRLabel xrLabel32;
        private DevExpress.XtraReports.UI.XRLabel xrLabel19;
        private DevExpress.XtraReports.UI.XRLabel xrLabel17;
        private DevExpress.XtraReports.UI.XRLabel xrLabel15;
        private DevExpress.XtraReports.UI.XRLabel xrLabel13;
        private DevExpress.XtraReports.UI.XRLabel xrLabel11;
        private DevExpress.XtraReports.UI.XRLabel xrLabel10;
        private DevExpress.XtraReports.UI.XRLabel xrLabel8;
        private DevExpress.XtraReports.UI.XRLabel xrLabel2;
        private DevExpress.XtraReports.UI.XRLabel xrLabel14;
        private DevExpress.XtraReports.UI.XRPivotGrid xrPivotGrid1;
        private System.Data.DataSet dataSet1;
        private DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField field110;
        private DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField fieldMIC;
        private DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField field60;
        private DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField field61;
        private DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField xrPivotGridField1;
        private DevExpress.XtraReports.UI.XRLabel xrLabel73;
        private DevExpress.XtraReports.UI.XRLabel xrLabel56;
        private DevExpress.XtraReports.UI.XRLabel xrLabel54;
        private DevExpress.XtraReports.UI.XRLabel xrLabel52;
        private DevExpress.XtraReports.UI.XRLabel xrLabel50;
        private DevExpress.XtraReports.UI.XRLabel xrLabel47;
        private DevExpress.XtraReports.UI.XRLabel xrLabel44;
        private DevExpress.XtraReports.UI.XRLabel xrLabel40;
        private DevExpress.XtraReports.UI.XRLabel xrLabel30;
        private DevExpress.XtraReports.UI.XRLine xrLine4;
        private DevExpress.XtraReports.UI.XRLabel xrLabel26;
        private DevExpress.XtraReports.UI.XRPictureBox xrPictureBox1;
        private DevExpress.XtraReports.UI.XRLabel xrLabel23;
        private DevExpress.XtraReports.UI.XRLabel xrLabel22;
        private DevExpress.XtraReports.UI.XRBarCode xrBarCode1;
        private DevExpress.XtraReports.UI.XRLabel xrLabel18;
        private DevExpress.XtraReports.UI.XRLabel xrLabel16;
        private DevExpress.XtraReports.UI.XRLabel xrLabel7;
        private DevExpress.XtraReports.UI.XRLine xrLine2;
        private DevExpress.XtraReports.UI.XRLabel xrLabel6;
        private DevExpress.XtraReports.UI.XRLabel xrLabel3;
        private DevExpress.XtraReports.UI.XRControlStyle xrControlStyle1;
        private System.Resources.ResourceManager _resources;
        public xtraReport11() {
            this.InitializeComponent();
        }
        private System.Resources.ResourceManager resources {
            get {
                if (_resources == null) {
                    string resourceString = "zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJza" +
                        "W9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4O" +
                        "SNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAABAAAAAQAAAGhTeXN0ZW0uRHJhd" +
                        "2luZy5CaXRtYXAsIFN5c3RlbS5EcmF3aW5nLCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhb" +
                        "CwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYVBBRFBBRE4GIBoAAAAATwEAACZ4AHIAUABpA" +
                        "GMAdAB1AHIAZQBCAG8AeAAxAC4ASQBtAGEAZwBlAAAAAABAAAEAAAD/////AQAAAAAAAAAMAgAAAFFTe" +
                        "XN0ZW0uRHJhd2luZywgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva" +
                        "2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAA" +
                        "AAJAwAAAA8DAAAAQEcAAAL/2P/gABBKRklGAAEBAQBIAEgAAP/hCXJFeGlmAABNTQAqAAAACAAHARIAA" +
                        "wAAAAEAAQAAARoABQAAAAEAAABiARsABQAAAAEAAABqASgAAwAAAAEAAgAAATEAAgAAABwAAAByATIAA" +
                        "gAAABQAAACOh2kABAAAAAEAAACiAAAAwgBIAAAAAQAAAEgAAAABAABBZG9iZSBQaG90b3Nob3AgQ1MzI" +
                        "FdpbmRvd3MAMjAxMjowNjoyOSAxNDozMToxNgAAAqACAAQAAAABAAABxqADAAQAAAABAAABVAAAAAAAA" +
                        "AAGAQMAAwAAAAEABgAAARoABQAAAAEAAAEQARsABQAAAAEAAAEYASgAAwAAAAEAAgAAAgEABAAAAAEAA" +
                        "AEgAgIABAAAAAEAAAhKAAAAAAAAAEgAAAABAAAASAAAAAH/2P/bAEMACAYGBwYFCAcHBwkJCAoMFA0MC" +
                        "wsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/bAEMBCQkJDAsMGA0NG" +
                        "DIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIA" +
                        "EgAYAMBIQACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDB" +
                        "QUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1N" +
                        "jc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanq" +
                        "KmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBA" +
                        "QEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxE" +
                        "yIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZ" +
                        "WZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS0" +
                        "9TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/APfqKACg9KAMfxF4j0/w1p32u+c5Y" +
                        "7Yok5eVvQD+vQV5Xf8AxY164mJs4bSziz8q7PNbHux4P4AV6eAwCrrnnseZjsf7B8kNy9ovxcvI51j1q" +
                        "zimgJwZrYFXT3KkkN+GPxr1ezu7e/tYrq1mSaCVQ8ciHIYGssdg/q8k1szXA4z6xFp7onorhO4KKACig" +
                        "ApD0NAHgfxE1STU/GV2rMfKsz9niXsAOWP4n+Q9K5bFfX4SChQgvI+Qxc3OvJvuJXqnwf1V2XUdIkclI" +
                        "wtxCPTJIcfTO0/iawzOClhm+1joyyfLiEu9z1Oivlz6cKKACkJoAgu722sYDPdzxQRDq8jhR9Oawbjx5" +
                        "4egjZlvTMR/DFGxJ/MCsqlaFP4mYVsTSo/Gzx7xnayw+IZLySIxx6lGt7EM54cZIz3IPB/D1FYFfaYSa" +
                        "nQhJdj5bExcaskxzRsIkkJXa5YABgTxjOR1HUdev4V1vw41rT9C8Q3NzqVyIIXtGjVipOW3occewNTjI" +
                        "SqUJRitf+CXg5qnXjKWx6lB4+8LTyCNdZgVjwDJlB+ZAAro1dXUMpBVhkEHIIr5erRqUnaasfUUq1Oqr" +
                        "wdx1FZGoVV1G+h0zT5724JEUKF2x1PsPc9KUnZXJlJRi5PoeH6vq95rl8by9fL/AMEYPyxD0X/HvVCvn" +
                        "5zc5OTPjqtWVWbnLqek6VaaX478GQ6feHF1YgRiRMb4iBhWHsQOR0OD6VweqfDvxFp10IobM38TH93Nb" +
                        "9CPcE5X+XvX2eUY+MKahU2PXxGGeJpQrU97anMXdtcWVzJbTRhJ4n2yIWHynuMjPNR19JGXMuZbM8aUe" +
                        "V2e4dq7H4f+LZ9C1WDT55S2mXLiMox4hZjgMvoMnkdOc1z4yiq1GUfuOjB1nSrKXQ92HSivkT60K5f4g" +
                        "7/+EQudnTzI9303D/61Z1v4cvQwxV/Yzt2Z4+KRhkH6V8+fHnqvh3R9L1JNP16ynmt7pI1jnWBwFZlAD" +
                        "Kwx3wP0NdFf65pml3EUF9exW8koLIJDgYzjJPQD617tPkhDm6M+tounTpc97J6/ecN40+HMeoCXV9BAF" +
                        "y+ZJbYH5Zs87kPZv0PtXknIOCCCDggjBB7j619blmJ9tS5ZbxPDzHDeyqc0dmFRXOPs02emxun0r0ZbH" +
                        "BH4kfVKbti7sbsc49adXxB9qtgqrqFlDqVhPZ3AJhnQo2Dgj3HvSaurMUoqSafU8Q1jRrzQr02l6mCf9" +
                        "XKBhZR6r/h1FUK+fnBwk4s+Nq0nSm4S6FvT9UvtKnaawupIHbhtp4b6joas6r4i1PW4o4r+aORY23IRE" +
                        "qkH6gZq415qHs+hpHFVI0nSvoWPDnim98PShEzNYk/PbE8D3T0P6H9ah+JFlZnUrLXNOYG21WNnbA/5a" +
                        "LgEn0JBHHqDX0PD+J/fqmzpjV9rhJU5bxs16bHFV2nw/wDCFxreqQalcRMumWziQOw4mYHIVfUZ5J6cY" +
                        "r6rG1lRoyfXoY4Ki6tZJbdT3IUtfJH1gUmKAIri0t7yFoLmGOeJuqSIGB/A1jHwV4cJJOlRfgzf41EqU" +
                        "J/EjGph6VV3nG55JrdvFaa9qFvAmyGK4ZEUdgD0qjivBmrSaR8lVSVSSXdhXU+EdJs/Ewk0jUjK1vbSC" +
                        "8iRG25JBR1J645Q8dxXVl9aVLERlHfU3wKUqyg9nod7b+BPC9tIsiaLasw6eYC4/JiRXQhQAAOAOAB2r" +
                        "26lapUd5u59RTowpq0FYWiszQKKACk7UAeNeONOk0/xTcOyny7r9/G3Y5+8PwP8x61zua8GvHlqSR8hi" +
                        "4clea8wr0X4Y6a6Le6pIuFk2wQn1AJLH89o/CtMHG9VeRvlkObEp9rnodFe0fUBRQAUUAFFAGZrWiWWu" +
                        "2X2a8QkA5SReGQ+oNeeXfw11aGU/ZLm2uYs8FiY2/Ecj9a48ThvavmjueZjsA6754blzS/hnO0wfVruN" +
                        "Ygf9Tb5LN9WOMfgD9RXoltbw2kEdvbxrHDGoVEUYCj0q8Nh/ZLXc1wWDWHi29Wyaiuk7gooA//Z/+0T8" +
                        "FBob3Rvc2hvcCAzLjAAOEJJTQQlAAAAAAAQAAAAAAAAAAAAAAAAAAAAADhCSU0ELwAAAAAASq8BAQBIA" +
                        "AAASAAAAAAAAAAAAAAA0AIAAEACAAAAAAAAAAAAABgDAABkAgAAAAHAAwAAsAQAAAEADycBAGxsdW4AA" +
                        "AAAAAAAAAAAOEJJTQPtAAAAAAAQAEgAAAABAAIASAAAAAEAAjhCSU0EJgAAAAAADgAAAAAAAAAAAAA/g" +
                        "AAAOEJJTQQNAAAAAAAEAAAAeDhCSU0EGQAAAAAABAAAAB44QklNA/MAAAAAAAkAAAAAAAAAAAEAOEJJT" +
                        "QQKAAAAAAABAAA4QklNJxAAAAAAAAoAAQAAAAAAAAACOEJJTQP1AAAAAABIAC9mZgABAGxmZgAGAAAAA" +
                        "AABAC9mZgABAKGZmgAGAAAAAAABADIAAAABAFoAAAAGAAAAAAABADUAAAABAC0AAAAGAAAAAAABOEJJT" +
                        "QP4AAAAAABwAAD/////////////////////////////A+gAAAAA/////////////////////////////" +
                        "wPoAAAAAP////////////////////////////8D6AAAAAD/////////////////////////////A+gAA" +
                        "DhCSU0EAAAAAAAAAgABOEJJTQQCAAAAAAAEAAAAADhCSU0EMAAAAAAAAgEBOEJJTQQtAAAAAAAGAAEAA" +
                        "AACOEJJTQQIAAAAAAAQAAAAAQAAAkAAAAJAAAAAADhCSU0EHgAAAAAABAAAAAA4QklNBBoAAAAAAz8AA" +
                        "AAGAAAAAAAAAAAAAAFUAAABxgAAAAVl4GgHmJgALQAxAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA" +
                        "AAAAAAAAAHGAAABVAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABAAAAAAAAb" +
                        "nVsbAAAAAIAAAAGYm91bmRzT2JqYwAAAAEAAAAAAABSY3QxAAAABAAAAABUb3AgbG9uZwAAAAAAAAAAT" +
                        "GVmdGxvbmcAAAAAAAAAAEJ0b21sb25nAAABVAAAAABSZ2h0bG9uZwAAAcYAAAAGc2xpY2VzVmxMcwAAA" +
                        "AFPYmpjAAAAAQAAAAAABXNsaWNlAAAAEgAAAAdzbGljZUlEbG9uZwAAAAAAAAAHZ3JvdXBJRGxvbmcAA" +
                        "AAAAAAABm9yaWdpbmVudW0AAAAMRVNsaWNlT3JpZ2luAAAADWF1dG9HZW5lcmF0ZWQAAAAAVHlwZWVud" +
                        "W0AAAAKRVNsaWNlVHlwZQAAAABJbWcgAAAABmJvdW5kc09iamMAAAABAAAAAAAAUmN0MQAAAAQAAAAAV" +
                        "G9wIGxvbmcAAAAAAAAAAExlZnRsb25nAAAAAAAAAABCdG9tbG9uZwAAAVQAAAAAUmdodGxvbmcAAAHGA" +
                        "AAAA3VybFRFWFQAAAABAAAAAAAAbnVsbFRFWFQAAAABAAAAAAAATXNnZVRFWFQAAAABAAAAAAAGYWx0V" +
                        "GFnVEVYVAAAAAEAAAAAAA5jZWxsVGV4dElzSFRNTGJvb2wBAAAACGNlbGxUZXh0VEVYVAAAAAEAAAAAA" +
                        "Alob3J6QWxpZ25lbnVtAAAAD0VTbGljZUhvcnpBbGlnbgAAAAdkZWZhdWx0AAAACXZlcnRBbGlnbmVud" +
                        "W0AAAAPRVNsaWNlVmVydEFsaWduAAAAB2RlZmF1bHQAAAALYmdDb2xvclR5cGVlbnVtAAAAEUVTbGljZ" +
                        "UJHQ29sb3JUeXBlAAAAAE5vbmUAAAAJdG9wT3V0c2V0bG9uZwAAAAAAAAAKbGVmdE91dHNldGxvbmcAA" +
                        "AAAAAAADGJvdHRvbU91dHNldGxvbmcAAAAAAAAAC3JpZ2h0T3V0c2V0bG9uZwAAAAAAOEJJTQQoAAAAA" +
                        "AAMAAAAAT/wAAAAAAAAOEJJTQQUAAAAAAAEAAAAAjhCSU0EDAAAAAANrQAAAAEAAACgAAAAeAAAAeAAA" +
                        "OEAAAANkQAYAAH/2P/gABBKRklGAAECAABIAEgAAP/tAAxBZG9iZV9DTQAB/+4ADkFkb2JlAGSAAAAAA" +
                        "f/bAIQADAgICAkIDAkJDBELCgsRFQ8MDA8VGBMTFRMTGBEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMD" +
                        "AwMDAwMDAwMDAENCwsNDg0QDg4QFA4ODhQUDg4ODhQRDAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMD" +
                        "AwMDAwMDAwMDAwMDAwM/8AAEQgAeACgAwEiAAIRAQMRAf/dAAQACv/EAT8AAAEFAQEBAQEBAAAAAAAAA" +
                        "AMAAQIEBQYHCAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAABBAEDAgQCBQcGCAUDDDMBA" +
                        "AIRAwQhEjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0UMHJZJT8OHxY3M1FqKygyZEk1RkRcKjdDYX0" +
                        "lXiZfKzhMPTdePzRieUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm9jdHV2d3h5ent8fX5/cRAAICAQIEB" +
                        "AMEBQYHBwYFNQEAAhEDITESBEFRYXEiEwUygZEUobFCI8FS0fAzJGLhcoKSQ1MVY3M08SUGFqKygwcmN" +
                        "cLSRJNUoxdkRVU2dGXi8rOEw9N14/NGlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vYnN0dXZ3eHl6e3x" +
                        "//aAAwDAQACEQMRAD8A9VSSSSUpJJJJSkkkklKSSXL/AFz+tLulVjAwXRn3N3OfE+lWdN+vt9WyP0X/A" +
                        "G4/8z1H4sUssxCA1P8AK1mTJHHAzkaAdTq/1k6P0j25l49aJGPWN9h/sN/m/wCvb6bFz93+MvGD4owLX" +
                        "s8bLGsP+awXf9UuEc5z3use4ve8lz3uJLnOOrnve73Oc5MtbH8NwxHruZ8+Ef8ANcrJ8Ryk+ioD/GL6L" +
                        "h/4xej3ODcuq7EJ5eQLGD50zb/4CumxsnHyqW5GNa26l+rbGEOae30mrxRaHROu53RMsX4p3VOP6fGJh" +
                        "lg/75d/o7v/AEX7EzN8NgQTiJEv3ZfKV+D4lKwMoBB/SHR9gSVfAzsfqGHVm4zt1N7dzD3/AJTXfuvY7" +
                        "2PVhZRBBIOhGjqggix1UkkkgpSSSSSlJJJJKf/Q9VSSSSUpJJJJSkkkklLEgCToByV4x1HOs6jn5GfZO" +
                        "7JsLwD2b9Gpn/W6msYvYc1j7MO9lf031vaz4lpDV4oz6DfgPyLT+FxH6yXX0j6Ob8Ukaxx6alkkkktRy" +
                        "1JJJJKe4/xbdQcRmdNe6WtjIpHhu/R3/wDS9F39tdwvN/8AF1/y/b/4Us/8+Y69IWH8QiBzEq6gF3OQk" +
                        "Ty8b6WFJJJKo2lJJJJKUkkkkp//0fVUkkklKSSXPfWf6yHpw+xYRBzXiXviRU0/RdtPtda//Bs/65Z/w" +
                        "jZzjCJlLZZlyxxwM5mgP5UHVz+r9N6cB9syG1Odq1mrnkeLambrHf5qyH/XnpAJDash48QxoH/gljHLi" +
                        "XOc97rHuL7HmXvcS5zj4ve73OTKlLm5k+kCI+1yp/EspPoAiP8AGk9WPrbk9R6lh4mLWcXHsvYLHuINj" +
                        "mg79nt9lbH7dr/5xcl9ZukP6R1i7H2xj2k3YpHBrcZ2D/iH/of8z/SI+JkfZMujKIkY9rLCByQ0gvH+Y" +
                        "vQet9EwevYAptMOHvxslkEscRo9v+krf/hK/wDCf5liv/CecMJzMzYlQl4R/Rl/grsYlzeLJxSvLAiUe" +
                        "np/dfI0ld6t0bqHR8j0M6vbu/mrW612Af6J/wD6Ld+lVJdNGUZASiQQdiGhKMokxkCCOhUkkkih2Pqr1" +
                        "rH6J1R2Zk1vsqfS6oiqC4Fzq7A6HuY3/BfvLrf/AByOif8AcfL/AMyv/wBLrzpJV8vJ4ssuOYN7aFsYu" +
                        "cy4o8EarxD6bifX36u5DttllmKToPXYQP8Atyr1a2f23roKrqr6220vbbU8Sx7CHNI8Wub7XLxJaXQ+v" +
                        "5/RMgWYzt9DjN2K4+x4/Oj/AEV3/DN/656jFVzfDI0TiJv92Wx/wm1h+JGwMoFfvR/g+vJKt07PxupYV" +
                        "WbikupububOhB+i9jx+/W8bHqyssggkEURoXTBBAI2KkkkkEv8A/9L1VJJJJTC65lFNl1hhlTS958mjc" +
                        "5eV35NuXfZlXGbb3Gx/lPDf6tbf0bV6R17d+xM/bz9nt+7Y6V5oqXOE3EdKty/ikjxY49KMvqpJJJVHN" +
                        "SY2Nfl5DMbHbvutJDGyBJALz7ne36LV0/1S+sVdbGdKznbNp24tr9B/4Vs3fQez/A/9sfT2erz/AEjLZ" +
                        "hdVxMp5iuqweo48BjwabH/2G2b13ef9Wei59rrr6Itf9N9bnM3f1wwta/8ArKzy8JG5QI4omjGW0oFvc" +
                        "jjmbyYpDjieGUJfLLGW/k42PlUuoyam3Uv0dXYA5p/suXPP/wAXv1fdf6rfXrr/ANA2z2f5z2uv/wDBl" +
                        "0dNTKamU1giutoYwElxho2t9z9znf2lKQSQDqOQtLHmyY/kkY3vwl1Z4oTrjiJV3fIfrFiYmF1jIw8Sm" +
                        "yiqghu2128ukbvVZ+7U/d+j99n/AKLWcvXeufV/p/W6PTymbbmj9DksgWMPk786v96p/sXmPWuiZvRcv" +
                        "7NlgFrpNF7foWNHdv7r2f4Wr/B/8X6di2eU5qGWIgSRkA1EjfHX6QLkc5ys8cjMC8ZPT9HwaCSSSttNS" +
                        "SSSSnsv8W/UXMysnpjj+jtb9oqHg9pbVdH/ABjHVf8AbS75eWfUfd/znxdvG23d8PTd/wB+2r1NYnxGI" +
                        "jnsfpREj5/L/wBy7Xw+RlgF/okxUkkkqbcf/9P1VJJJJTC6pl1T6bBLLGljh4hw2uXlmTi24eRbiXD9J" +
                        "juNbvOPovE/m2M22NXqywPrN9XP2k37XiQ3OrbG0mG2tH+DcfzbG/4Kz/rdn79VfmcRnEGPzR/ENPn+X" +
                        "OWAlAXOHT96PV4RJPZXZVY6m1jq7WaPreNrh8WlMs9xdlLoOg/Wyzp9TcTNa6/FZpVY3WysfuFrv52pv" +
                        "5n+Er/4Rc+knQnKBuJor8WWeKXFA0fz830Wv60dAsbuGbW3yfLD/m2BrlxPVPseP1N+T0nMdb6jnWeoz" +
                        "ex7HOO5zPX09dvu+l/26qCSkyZ5ZAAQNNiGbPzk80QJRiDE2JR4rHlq9R0f66W1kU9WHqV8DKYPcP8Aj" +
                        "qmfTb/Lq/7aXR9T6dg9c6a7HtLbKbQH03MIdtdH6O+l4/d/6f8AN/za80Wv9XvrBZ0m4V2kuwLD+lZz6" +
                        "ZP+HqH/AJ9r/wDRil5fm5QkOI7bT/Siz8tzx/m8/qgdOI9P7/8AVeZzsLIwMy7CyQBdQ7Y+OD+c2xk/m" +
                        "WMLbGIC7H/GNh1+vhdTphzchhqe9sFp2/paHSPpbmPtXHLr+Xy+7ihPuNf7w3anMYvayygNh8v907KSS" +
                        "Wp0H6uZ/XLgKAa8Rpi3LcPaP3m1f6a7+Q36H+FT5zjCJlI8MR1KyEJTkIxFku//AIt+mvdkZPVHiK2N+" +
                        "zUnxc4ttvP/AFvbU3+3Yu9VfAwcbp+HVh4rdlNLdrB38XOd+897ve9ysLA5jN7uWU9gdI/3Q7/L4vaxx" +
                        "h23/vKSSSULK//U9VSSSSUpJJJJTVzumdP6g0NzKGXR9Fzh7h/UsbFjP7Llkv8AqR0VziWm+sH81thIH" +
                        "/bge5dAkmSxwlrKIP0Y54MUzc4Rke5GrzGX9S+lVYt1rLLw+utzmy8ES0FwluxcW0y0HxAK9UzgXYWQ0" +
                        "ak1PA/zSvKmfQb8B+RU+ahGJjwirBcv4hihjlDgiI2DdMkkklWaKkkkklOxi42Z9YOi19Fqc1tmFlMtF" +
                        "th0bjuZe36P07PTs/RsZ/xS1KP8W/SmsH2jKyLbPziwsraf6rNljm/9uqn9Ryf2zaBwcZ0/J9O38q7pb" +
                        "HJ83mjy8YRlwiJOzr8nix5cUZ5I8Uh6LP7sPlcDE+o/1cxnB5xzkuaZBve54+dWlLv7Va3WMZWxrGNDG" +
                        "NADWtEAAcBoCkknzyTnrORl/eNt2GOEBUYiPkFJJJJi5SSSSSn/1fVUkkklKSSSSUpJJJJS3K8szsN2B" +
                        "m34T+aHlrSe7PpUv/t1Fi9UWB9aPq87qdYysSBm0t2hpMCxn0vSLj9Gxv8AgX/9ufv11+ZxGcQRrKP5N" +
                        "PnuXOXGDEXKGoH70T8zwiSTmuY91b2lljDD2OBDmn917T9FJZ7iqSSV7o/Rsvq9/p0AtoaYuyCPawd2t" +
                        "/fu/wCD/wC3EYxMiABZK6EJTkIxFyOwd/6iYTg3J6g4QHxRUfEN99x/zyxn/W11qDiYtGHjV4uO3ZVS0" +
                        "NY0eA8f5TvzkZamKHBAR7b+bv8AL4vaxRh23/vHdSSSSeyqSSSSUpJJJJT/AP/W9VSXyqkkp+qkl8qpJ" +
                        "KfqpJfKqSSn6qSXyqkkp+nOo9F6Z1MA5dAe8CG2tltgHlYza/8AsfQWNZ9Q8En9Fl3sHg7Y7/vjV8+JK" +
                        "DL7F+vh4v8Anf8ANamf7pxfreDi/wCf9eB+isb6k9HpcHXOtyiPzbHAN/zKW1f9NbtVVVNbaqWNrrYIa" +
                        "xgDWgfyWtXywknYva/ydeNbsnL/AHej7PD48Pzf4X6T9VJL5VSUrO/VSS+VUklP1UkvlVJJT9VJL5VSS" +
                        "U//2QA4QklNBCEAAAAAAFUAAAABAQAAAA8AQQBkAG8AYgBlACAAUABoAG8AdABvAHMAaABvAHAAAAATA" +
                        "EEAZABvAGIAZQAgAFAAaABvAHQAbwBzAGgAbwBwACAAQwBTADMAAAABADhCSU0EBgAAAAAAB///AAAAA" +
                        "QEA/+EPzmh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8APD94cGFja2V0IGJlZ2luPSLvu78iIGlkP" +
                        "SJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4NCjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6b" +
                        "WV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDQuMS1jMDM2IDQ2LjI3NjcyMCwgTW9uIEZlYiAxO" +
                        "SAyMDA3IDIyOjQwOjA4ICAgICAgICAiPg0KCTxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53M" +
                        "y5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+DQoJCTxyZGY6RGVzY3JpcHRpb24gcmRmOmFib" +
                        "3V0PSIiIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eGFwP" +
                        "SJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4YXBNTT0iaHR0cDovL25zLmFkb2JlL" +
                        "mNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zV" +
                        "HlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b" +
                        "3Nob3AvMS4wLyIgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iIHhtbG5zO" +
                        "mV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIiBkYzpmb3JtYXQ9ImltYWdlL2pwZWciI" +
                        "HhhcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTMyBXaW5kb3dzIiB4YXA6Q3JlYXRlRGF0Z" +
                        "T0iMjAxMi0wNi0yOVQxNDozMToxNiswODowMCIgeGFwOk1vZGlmeURhdGU9IjIwMTItMDYtMjlUMTQ6M" +
                        "zE6MTYrMDg6MDAiIHhhcDpNZXRhZGF0YURhdGU9IjIwMTItMDYtMjlUMTQ6MzE6MTYrMDg6MDAiIHhhc" +
                        "E1NOkRvY3VtZW50SUQ9InV1aWQ6RjVERDExN0ZCM0MxRTExMUE0RTJGQTU5OEZFMEU0RjQiIHhhcE1NO" +
                        "kluc3RhbmNlSUQ9InV1aWQ6RjZERDExN0ZCM0MxRTExMUE0RTJGQTU5OEZFMEU0RjQiIHBob3Rvc2hvc" +
                        "DpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgcGhvd" +
                        "G9zaG9wOkhpc3Rvcnk9IiIgdGlmZjpPcmllbnRhdGlvbj0iMSIgdGlmZjpYUmVzb2x1dGlvbj0iNzIwM" +
                        "DAwLzEwMDAwIiB0aWZmOllSZXNvbHV0aW9uPSI3MjAwMDAvMTAwMDAiIHRpZmY6UmVzb2x1dGlvblVua" +
                        "XQ9IjIiIHRpZmY6TmF0aXZlRGlnZXN0PSIyNTYsMjU3LDI1OCwyNTksMjYyLDI3NCwyNzcsMjg0LDUzM" +
                        "Cw1MzEsMjgyLDI4MywyOTYsMzAxLDMxOCwzMTksNTI5LDUzMiwzMDYsMjcwLDI3MSwyNzIsMzA1LDMxN" +
                        "SwzMzQzMjswM0NBQ0U1QzJBRkE5RjFDOEQ0N0M0QTIwNkUwQTM3OSIgZXhpZjpQaXhlbFhEaW1lbnNpb" +
                        "249IjQ1NCIgZXhpZjpQaXhlbFlEaW1lbnNpb249IjM0MCIgZXhpZjpDb2xvclNwYWNlPSIxIiBleGlmO" +
                        "k5hdGl2ZURpZ2VzdD0iMzY4NjQsNDA5NjAsNDA5NjEsMzcxMjEsMzcxMjIsNDA5NjIsNDA5NjMsMzc1M" +
                        "TAsNDA5NjQsMzY4NjcsMzY4NjgsMzM0MzQsMzM0MzcsMzQ4NTAsMzQ4NTIsMzQ4NTUsMzQ4NTYsMzczN" +
                        "zcsMzczNzgsMzczNzksMzczODAsMzczODEsMzczODIsMzczODMsMzczODQsMzczODUsMzczODYsMzczO" +
                        "TYsNDE0ODMsNDE0ODQsNDE0ODYsNDE0ODcsNDE0ODgsNDE0OTIsNDE0OTMsNDE0OTUsNDE3MjgsNDE3M" +
                        "jksNDE3MzAsNDE5ODUsNDE5ODYsNDE5ODcsNDE5ODgsNDE5ODksNDE5OTAsNDE5OTEsNDE5OTIsNDE5O" +
                        "TMsNDE5OTQsNDE5OTUsNDE5OTYsNDIwMTYsMCwyLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1L" +
                        "DE2LDE3LDE4LDIwLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDMwOzMwQzFFRTJCN0RFNjgyNjU3OUM4RUU4Q" +
                        "zcwM0MxRThGIj4NCgkJCTx4YXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ1dWlkOkYyR" +
                        "EQxMTdGQjNDMUUxMTFBNEUyRkE1OThGRTBFNEY0IiBzdFJlZjpkb2N1bWVudElEPSJ1dWlkOkYyREQxM" +
                        "TdGQjNDMUUxMTFBNEUyRkE1OThGRTBFNEY0Ii8+DQoJCTwvcmRmOkRlc2NyaXB0aW9uPg0KCTwvcmRmO" +
                        "lJERj4NCjwveDp4bXBtZXRhPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "AogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgC" +
                        "iAgICAgICAgICAgPD94cGFja2V0IGVuZD0ndyc/Pv/iDFhJQ0NfUFJPRklMRQABAQAADEhMaW5vAhAAA" +
                        "G1udHJSR0IgWFlaIAfOAAIACQAGADEAAGFjc3BNU0ZUAAAAAElFQyBzUkdCAAAAAAAAAAAAAAAAAAD21" +
                        "gABAAAAANMtSFAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE" +
                        "WNwcnQAAAFQAAAAM2Rlc2MAAAGEAAAAbHd0cHQAAAHwAAAAFGJrcHQAAAIEAAAAFHJYWVoAAAIYAAAAF" +
                        "GdYWVoAAAIsAAAAFGJYWVoAAAJAAAAAFGRtbmQAAAJUAAAAcGRtZGQAAALEAAAAiHZ1ZWQAAANMAAAAh" +
                        "nZpZXcAAAPUAAAAJGx1bWkAAAP4AAAAFG1lYXMAAAQMAAAAJHRlY2gAAAQwAAAADHJUUkMAAAQ8AAAID" +
                        "GdUUkMAAAQ8AAAIDGJUUkMAAAQ8AAAIDHRleHQAAAAAQ29weXJpZ2h0IChjKSAxOTk4IEhld2xldHQtU" +
                        "GFja2FyZCBDb21wYW55AABkZXNjAAAAAAAAABJzUkdCIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAAEnNSR" +
                        "0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                        "AAAAABYWVogAAAAAAAA81EAAQAAAAEWzFhZWiAAAAAAAAAAAAAAAAAAAAAAWFlaIAAAAAAAAG+iAAA49" +
                        "QAAA5BYWVogAAAAAAAAYpkAALeFAAAY2lhZWiAAAAAAAAAkoAAAD4QAALbPZGVzYwAAAAAAAAAWSUVDI" +
                        "Gh0dHA6Ly93d3cuaWVjLmNoAAAAAAAAAAAAAAAWSUVDIGh0dHA6Ly93d3cuaWVjLmNoAAAAAAAAAAAAA" +
                        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALklFQyA2MTk2Ni0yL" +
                        "jEgRGVmYXVsdCBSR0IgY29sb3VyIHNwYWNlIC0gc1JHQgAAAAAAAAAAAAAALklFQyA2MTk2Ni0yLjEgR" +
                        "GVmYXVsdCBSR0IgY29sb3VyIHNwYWNlIC0gc1JHQgAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZXNjAAAAA" +
                        "AAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAsU" +
                        "mVmZXJlbmNlIFZpZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAAAAAAAAAAA" +
                        "AAAAAAAAAAAdmlldwAAAAAAE6T+ABRfLgAQzxQAA+3MAAQTCwADXJ4AAAABWFlaIAAAAAAATAlWAFAAA" +
                        "ABXH+dtZWFzAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAACjwAAAAJzaWcgAAAAAENSVCBjdXJ2AAAAA" +
                        "AAABAAAAAAFAAoADwAUABkAHgAjACgALQAyADcAOwBAAEUASgBPAFQAWQBeAGMAaABtAHIAdwB8AIEAh" +
                        "gCLAJAAlQCaAJ8ApACpAK4AsgC3ALwAwQDGAMsA0ADVANsA4ADlAOsA8AD2APsBAQEHAQ0BEwEZAR8BJ" +
                        "QErATIBOAE+AUUBTAFSAVkBYAFnAW4BdQF8AYMBiwGSAZoBoQGpAbEBuQHBAckB0QHZAeEB6QHyAfoCA" +
                        "wIMAhQCHQImAi8COAJBAksCVAJdAmcCcQJ6AoQCjgKYAqICrAK2AsECywLVAuAC6wL1AwADCwMWAyEDL" +
                        "QM4A0MDTwNaA2YDcgN+A4oDlgOiA64DugPHA9MD4APsA/kEBgQTBCAELQQ7BEgEVQRjBHEEfgSMBJoEq" +
                        "AS2BMQE0wThBPAE/gUNBRwFKwU6BUkFWAVnBXcFhgWWBaYFtQXFBdUF5QX2BgYGFgYnBjcGSAZZBmoGe" +
                        "waMBp0GrwbABtEG4wb1BwcHGQcrBz0HTwdhB3QHhgeZB6wHvwfSB+UH+AgLCB8IMghGCFoIbgiCCJYIq" +
                        "gi+CNII5wj7CRAJJQk6CU8JZAl5CY8JpAm6Cc8J5Qn7ChEKJwo9ClQKagqBCpgKrgrFCtwK8wsLCyILO" +
                        "QtRC2kLgAuYC7ALyAvhC/kMEgwqDEMMXAx1DI4MpwzADNkM8w0NDSYNQA1aDXQNjg2pDcMN3g34DhMOL" +
                        "g5JDmQOfw6bDrYO0g7uDwkPJQ9BD14Peg+WD7MPzw/sEAkQJhBDEGEQfhCbELkQ1xD1ERMRMRFPEW0Rj" +
                        "BGqEckR6BIHEiYSRRJkEoQSoxLDEuMTAxMjE0MTYxODE6QTxRPlFAYUJxRJFGoUixStFM4U8BUSFTQVV" +
                        "hV4FZsVvRXgFgMWJhZJFmwWjxayFtYW+hcdF0EXZReJF64X0hf3GBsYQBhlGIoYrxjVGPoZIBlFGWsZk" +
                        "Rm3Gd0aBBoqGlEadxqeGsUa7BsUGzsbYxuKG7Ib2hwCHCocUhx7HKMczBz1HR4dRx1wHZkdwx3sHhYeQ" +
                        "B5qHpQevh7pHxMfPh9pH5Qfvx/qIBUgQSBsIJggxCDwIRwhSCF1IaEhziH7IiciVSKCIq8i3SMKIzgjZ" +
                        "iOUI8Ij8CQfJE0kfCSrJNolCSU4JWgllyXHJfcmJyZXJocmtyboJxgnSSd6J6sn3CgNKD8ocSiiKNQpB" +
                        "ik4KWspnSnQKgIqNSpoKpsqzysCKzYraSudK9EsBSw5LG4soizXLQwtQS12Last4S4WLkwugi63Lu4vJ" +
                        "C9aL5Evxy/+MDUwbDCkMNsxEjFKMYIxujHyMioyYzKbMtQzDTNGM38zuDPxNCs0ZTSeNNg1EzVNNYc1w" +
                        "jX9Njc2cjauNuk3JDdgN5w31zgUOFA4jDjIOQU5Qjl/Obw5+To2OnQ6sjrvOy07azuqO+g8JzxlPKQ84" +
                        "z0iPWE9oT3gPiA+YD6gPuA/IT9hP6I/4kAjQGRApkDnQSlBakGsQe5CMEJyQrVC90M6Q31DwEQDREdEi" +
                        "kTORRJFVUWaRd5GIkZnRqtG8Ec1R3tHwEgFSEtIkUjXSR1JY0mpSfBKN0p9SsRLDEtTS5pL4kwqTHJMu" +
                        "k0CTUpNk03cTiVObk63TwBPSU+TT91QJ1BxULtRBlFQUZtR5lIxUnxSx1MTU19TqlP2VEJUj1TbVShVd" +
                        "VXCVg9WXFapVvdXRFeSV+BYL1h9WMtZGllpWbhaB1pWWqZa9VtFW5Vb5Vw1XIZc1l0nXXhdyV4aXmxev" +
                        "V8PX2Ffs2AFYFdgqmD8YU9homH1YklinGLwY0Njl2PrZEBklGTpZT1lkmXnZj1mkmboZz1nk2fpaD9ol" +
                        "mjsaUNpmmnxakhqn2r3a09rp2v/bFdsr20IbWBtuW4SbmtuxG8eb3hv0XArcIZw4HE6cZVx8HJLcqZzA" +
                        "XNdc7h0FHRwdMx1KHWFdeF2Pnabdvh3VnezeBF4bnjMeSp5iXnnekZ6pXsEe2N7wnwhfIF84X1BfaF+A" +
                        "X5ifsJ/I3+Ef+WAR4CogQqBa4HNgjCCkoL0g1eDuoQdhICE44VHhauGDoZyhteHO4efiASIaYjOiTOJm" +
                        "Yn+imSKyoswi5aL/IxjjMqNMY2Yjf+OZo7OjzaPnpAGkG6Q1pE/kaiSEZJ6kuOTTZO2lCCUipT0lV+Vy" +
                        "ZY0lp+XCpd1l+CYTJi4mSSZkJn8mmia1ZtCm6+cHJyJnPedZJ3SnkCerp8dn4uf+qBpoNihR6G2oiail" +
                        "qMGo3aj5qRWpMelOKWpphqmi6b9p26n4KhSqMSpN6mpqhyqj6sCq3Wr6axcrNCtRK24ri2uoa8Wr4uwA" +
                        "LB1sOqxYLHWskuywrM4s660JbSctRO1irYBtnm28Ldot+C4WbjRuUq5wro7urW7LrunvCG8m70VvY++C" +
                        "r6Evv+/er/1wHDA7MFnwePCX8Lbw1jD1MRRxM7FS8XIxkbGw8dBx7/IPci8yTrJuco4yrfLNsu2zDXMt" +
                        "c01zbXONs62zzfPuNA50LrRPNG+0j/SwdNE08bUSdTL1U7V0dZV1tjXXNfg2GTY6Nls2fHadtr724DcB" +
                        "dyK3RDdlt4c3qLfKd+v4DbgveFE4cziU+Lb42Pj6+Rz5PzlhOYN5pbnH+ep6DLovOlG6dDqW+rl63Dr+" +
                        "+yG7RHtnO4o7rTvQO/M8Fjw5fFy8f/yjPMZ86f0NPTC9VD13vZt9vv3ivgZ+Kj5OPnH+lf65/t3/Af8m" +
                        "P0p/br+S/7c/23////bAEMAAgEBAgEBAgICAgICAgIDBQMDAwMDBgQEAwUHBgcHBwYHBwgJCwkICAoIB" +
                        "wcKDQoKCwwMDAwHCQ4PDQwOCwwMDP/bAEMBAgICAwMDBgMDBgwIBwgMDAwMDAwMDAwMDAwMDAwMDAwMD" +
                        "AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDP/AABEIAEgAYAMBIgACEQEDEQH/xAAfAAABBQEBA" +
                        "QEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHI" +
                        "nEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZ" +
                        "mdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1" +
                        "dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/x" +
                        "AC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04" +
                        "SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk" +
                        "5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+" +
                        "fr/2gAMAwEAAhEDEQA/AP34ooooAKSQ4Qk9qGycYpj52MB1osJnkX7ZP7aPgj9iH4VnxR4xu5ma6kNvp" +
                        "mmWgV77V58Z8uFCQMAcs7EKoIyeQD+WHxY/4ODfjV4y16WTwtpHg/wPpYYmC2+ytqt2FwOJZ5SqOc8/J" +
                        "CmM4+bGa85/4LK/HjUPjf8At8+LbaeaU6Z4FYeG9MgJPlwLH807BegaSZmLN1ISMHhFA+WwgAPJ596/p" +
                        "bgTw1y2OX08bmVNVKlRKVne0U1dK3V23bv2R/NnHPiRmLx9TB5bU9nTptxut5Nbu/RX2sfpH+zN/wAHE" +
                        "virSPENtZfFvwrpGtaHO6xvq/h+N7W/sRzmR7dmeO4HIGIzEygHAkJwP1a+HXxD0T4seC9K8SeG9Us9b" +
                        "0LW7ZbuxvrV98VxEwyGB7ehBwQQQQCCK/mBYY5Ffqh/wbhfH68vbf4hfC6/unltNNWDxHo0bHPkrI7RX" +
                        "iD0Xf8AZnA/vSufr4viV4d4HCYKWa5ZHk5GuaK2abSur7NNrTa3oe34beIGOxeMWV5lLn5k+WT3TSvZ9" +
                        "7r5/p+pYOeR0NFA6cHNFfgZ+8hRRRQAU13Kk45x2p1ct8ZPitpXwQ+GOveLtceVNK8P2j3c4jUGSQKOI" +
                        "0BIBdmwoBIGWGSBUVKkYRcpOyWpnWqwpwdSo7JK7fZIteP/AIm+H/hZ4al1jxPrWleH9JiIV7vULpLaI" +
                        "MeihmIyx7KMkngCvCPGP/BWr4F+FdJnuYfFk2tzQqSttpunTySSHGcDeqrz7sB71+Vf7RH7RXir9qj4j" +
                        "y+KfF92st2Sy2VlExa00eIn/UwA9AOhfAZzyewHDtllOc4PFfluY+IdTnccHTXLsnK93520/Fn8/wCc+" +
                        "NFf20oZXRjyLRSne787Jqy9WS/8FMPAmp+Hv2p7/wAV3umy6Zp/xYsbbxvpaNIJVEV5GryReYAAzxSZV" +
                        "8dMqejKT4EWwccAdc9q/Zz4AfDz4c/8FYP+Cf2k+BfFMph8TfDmNNPjv7UoL/RZEQpBcxkjDQyxIFZD8" +
                        "r+WynDICPgz47/8EZvjz8GfGS6dpPhZ/iFpV3KVsNX0AqYp1xlTLE7B7diOoYsgIwHbrX90+GXiZluYZ" +
                        "TRoYuoqdSMUrydlJJbp7XSVmu60Pl+KODcXWcc4yyLq0a1pe7q4t7ppf3r/AJM+X7rSZrfRrO+drYwX0" +
                        "k0UapcI8qtF5e7fGDvQHzF2lgA+G252tj60/wCCKv7Tfgf9lP8Aak8SeIPH2vReH9HvvCk2nwXDwSzCS" +
                        "c3lpII8RqxBKRuckAfL16V8pfETwTrfwx8Xal4f1existd0e6+y31pLcI32VgQJFLRl1LqM8A9Rgkc4z" +
                        "jlSQCSf1r9MzfLKGc5fPBVJvkqJe9G211JW3T2X9M+QyjMq2T4+GNpxXPTb92V97Wd1o1uf0E+F/wDgr" +
                        "r+zh4s1aKxt/iv4dtJ5mCq1+JrGEHn70syLGo46swFfRNjqUOo2kNxbyxTQXCLLFJG4eORCMhlYcEEcg" +
                        "iv5bSSE6kbe/pX2J/wSB/4KHa1+yf8AGrRPA+r6jNc/DLxdex6c9nNIWi0K5mcJFdQZ/wBWhkcCRBhSH" +
                        "3YBXJ/EeJ/B/wCqYSeKyyq5uCu4ySu0t7NW1Xa2ve+/7Xwz4vfW8VHC5lSUFJ2Uot2Te1076ed9D91lb" +
                        "cM4xS02IEJg9QTTq/Dbn7gFfLv/AAWFW7P7C3iM2xYRi+sTc4HWL7Quc+27bX1FXMfF74X6T8afhtrvh" +
                        "PXY5ZNJ8Q2j2dz5TBZEVhw6EggOpwwJBAKjg9K48xw7r4WpQi7OUWvvR5mdYGWMwFbCQdnOMop+bTR+A" +
                        "sZAIHY8Cm3SeZFIpY4ZSMg4P4e9d/8AtH/s1eK/2T/iG/hrxdahJHLfYNSijKWesxj/AJawkk4OOWjyW" +
                        "TODkYJ4LcCp5BB/Kv5wxGGqUKjo1ouMk7NH8RY3BV8JWlhsTBxnHRp/1+J+qf7GP7N3w6+N2neAPjT4R" +
                        "1rXfDninTtPtdM1230W+SO0vLm3ijjmt7qEqww4RCV43KUbrhq+hvi3+1V8O/gT4n0nRfGXi7SfDeo6z" +
                        "E09ol9KYkZFYKXaTGyNAxxucgcH0Nfij8H/AI7eMfgB4jn1XwZ4i1Lw/eXKqtz9nYGK6Vc7VljYFHC5O" +
                        "NwJGTgiun+P/wC2b8RP2odF0/TvG2q6bqdvpUxntXi0m3tpoGIAYLIihgCAMgEA7VyDgV+kYPjjC0cHa" +
                        "FO1Xdq3ut6Xe6tf037n7dlvivgsLlrjSocuI0bVvck9LvRrlckr7aPufUX/AAU1/wCCLlj8XotU+KHwX" +
                        "jgg8RXxk1PUvD0TqbPxAX/eNPaODiKdiWYryku7I2Ny35JFXjkKSRywyxMyPHKhR43UkMrKcFWUggg8g" +
                        "gggV91/sX/t7eLf2N9ZitrUy634Jmlze+H5JcJGD96S1Y8Qy85wMI/RgCQwx/8Agtd8MvCcnxZ8F/GLw" +
                        "JNDN4a+NGnT3szRIVH2+1MSyuy/wSOsyblPO+KUnnNf1d4GeLX9r1FkuKld2927u1ZbX6xsnZ7pqz3R8" +
                        "txHHKs7wM87yyPsqsLe1p+UnbnXfV2bS66pPf4tOT0OKy/GaqPCGriQM0Zsp8hc7v8AVt0x39K0jkDJA" +
                        "A/Kvs//AII+/wDBOjW/2ovjLoPj/XdOuLT4ZeFLyPUkup4yqeILqFw8MEGcb41kUNJIMr8gQEljt/ofi" +
                        "DOcNlmBqYvFSSSTsurfRLu3/wAE+N4dyfE5lj6eGwsbttXfRK+rb6WP3F03z1sYBcmM3Plr5xThS+Pmx" +
                        "7ZzU9NiGVDHBY96dX8PN3dz+3IqySCmsnU5ANOopDMbxj4A0P4jeH59I8Q6RpevaVckGWy1C1juYJMHg" +
                        "lHBBIPQ44rxub/gmJ8BZpmdvhvo4LHJC3Fyoz7ASYA9q99AA5AAqM52Htj865q2EoVXerBSt3Sf5nFic" +
                        "twmJaliKUZv+9FP80fg5+0/4P034f8A7Snj/QdGtlstJ0fXrqzsrdWZhBEjfKgLEkge5NcMqE85619D/" +
                        "wDBU74M3vwi/bL8RXM8Mi6d4z/4nmnTH7k27CzKD0LJIOR1AdCeGGfnkPgDg4r+ec3w8qGNq0pK1pPTy" +
                        "vpb5H8XcSYOWFzXEYeceXlnLTybbVvKzVvIQjbnOK+ov+CdX7PvhX9uNL/4X/EGTVrjw/4Rv08aaVa2d" +
                        "x5HnSPDLZXUDuBuWMmW1lwhUl0OTgkH5dLBiT6V+in/AAQp+CN3YWfjT4i3sDR22qrDoekswwZEid5Lp" +
                        "x6qXMKexhavofD/ABWLw+dUq+Dk4yiparRpNPqfQ+G2Dlis+pUXHmg1LnT1XLyvfy5uXfrY+hfCX/BJ7" +
                        "9nTwZqkN7Z/CTwpPPAPl/tCKTUIzx1aOd3Rj9VOK+gYLNbeNEQBI41CqqgAIAMAADgD6VKxPGM0ozgZ6" +
                        "1+8YrG4jEtSxFSU2v5m3+Z/WeGwOHw8eXD04wX91JfkIoKjBOTS0UVynUFFFFABTSuAeSc0UUDR5r+01" +
                        "+y54S/av+HreHvFdnLJHE5msr2AhLvTpcY8yJyDgkcEEFWHBB4r89PiJ/wRG+J3h3V5V8NeIPCvijTC3" +
                        "7qW4eTTrsD/AG4iHj46ZWTnrtXpRRXhZpw9gcxkpYmHvd1o/wDg/O58nn/BWU5zJVMbT99ac0W1K3y0f" +
                        "zTt0Ot+A/8AwQ41i78QRXnxN8UaZbaVAysdJ0FpJp7wddsly6oIRngiNHJByHTof0T8F+EdK8AeGtO0P" +
                        "RLC10vSdKgW2s7S3jEcVvEowFUDtj8+pooroyvJsJgIuGGha+73b+f9I68h4Xy3J6bhgKfK5bt6yfq3+" +
                        "SsvI16KKK9U+gCiiigD/9kL";
                    this._resources = new DevExpress.XtraReports.Serialization.XRResourceManager(resourceString);
                }
                return this._resources;
            }
        }
        private void InitializeComponent() {
            DevExpress.XtraPrinting.BarCode.Code128Generator code128Generator1 = new DevExpress.XtraPrinting.BarCode.Code128Generator();
            this.Detail = new DevExpress.XtraReports.UI.DetailBand();
            this.PageFooter = new DevExpress.XtraReports.UI.PageFooterBand();
            this.PageHeader = new DevExpress.XtraReports.UI.PageHeaderBand();
            this.xrLine3 = new DevExpress.XtraReports.UI.XRLine();
            this.xrLabel5 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel24 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel35 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel12 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel34 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel33 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel9 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLine1 = new DevExpress.XtraReports.UI.XRLine();
            this.xrLabel70 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrPictureBox2 = new DevExpress.XtraReports.UI.XRPictureBox();
            this.xrLabel72 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel69 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel68 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel64 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLine7 = new DevExpress.XtraReports.UI.XRLine();
            this.xrLabel63 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel62 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel60 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel59 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel27 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel4 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel1 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel36 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel29 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel31 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel20 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel21 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel25 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel32 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel19 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel17 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel15 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel13 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel11 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel10 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel8 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel2 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel14 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrPivotGrid1 = new DevExpress.XtraReports.UI.XRPivotGrid();
            this.xrLabel73 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel56 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel54 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel52 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel50 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel47 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel44 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel40 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel30 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLine4 = new DevExpress.XtraReports.UI.XRLine();
            this.xrLabel26 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrPictureBox1 = new DevExpress.XtraReports.UI.XRPictureBox();
            this.xrLabel23 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel22 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrBarCode1 = new DevExpress.XtraReports.UI.XRBarCode();
            this.xrLabel18 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel16 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel7 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLine2 = new DevExpress.XtraReports.UI.XRLine();
            this.xrLabel6 = new DevExpress.XtraReports.UI.XRLabel();
            this.xrLabel3 = new DevExpress.XtraReports.UI.XRLabel();
            this.dataSet1 = new XtraReportSerialization.dataSet1();
            this.field110 = new DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField();
            this.fieldMIC = new DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField();
            this.field60 = new DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField();
            this.field61 = new DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField();
            this.xrPivotGridField1 = new DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField();
            this.xrControlStyle1 = new DevExpress.XtraReports.UI.XRControlStyle();
            ((System.ComponentModel.ISupportInitialize)(this.dataSet1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this)).BeginInit();
            // 
            // Detail
            // 
            this.Detail.Height = 0;
            this.Detail.Name = "Detail";
            this.Detail.Padding = new DevExpress.XtraPrinting.PaddingInfo(0, 0, 0, 0, 100F);
            this.Detail.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopLeft;
            // 
            // PageFooter
            // 
            this.PageFooter.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.xrLine3,
                        this.xrLabel5,
                        this.xrLabel24,
                        this.xrLabel35,
                        this.xrLabel12,
                        this.xrLabel34,
                        this.xrLabel33,
                        this.xrLabel9,
                        this.xrLine1,
                        this.xrLabel70,
                        this.xrPictureBox2,
                        this.xrLabel72,
                        this.xrLabel69,
                        this.xrLabel68,
                        this.xrLabel64,
                        this.xrLine7,
                        this.xrLabel63,
                        this.xrLabel62,
                        this.xrLabel60,
                        this.xrLabel59,
                        this.xrLabel27});
            this.PageFooter.Height = 238;
            this.PageFooter.Name = "PageFooter";
            this.PageFooter.Padding = new DevExpress.XtraPrinting.PaddingInfo(0, 0, 0, 0, 100F);
            this.PageFooter.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopLeft;
            // 
            // PageHeader
            // 
            this.PageHeader.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.xrLabel4,
                        this.xrLabel1,
                        this.xrLabel36,
                        this.xrLabel29,
                        this.xrLabel31,
                        this.xrLabel20,
                        this.xrLabel21,
                        this.xrLabel25,
                        this.xrLabel32,
                        this.xrLabel19,
                        this.xrLabel17,
                        this.xrLabel15,
                        this.xrLabel13,
                        this.xrLabel11,
                        this.xrLabel10,
                        this.xrLabel8,
                        this.xrLabel2,
                        this.xrLabel14,
                        this.xrPivotGrid1,
                        this.xrLabel73,
                        this.xrLabel56,
                        this.xrLabel54,
                        this.xrLabel52,
                        this.xrLabel50,
                        this.xrLabel47,
                        this.xrLabel44,
                        this.xrLabel40,
                        this.xrLabel30,
                        this.xrLine4,
                        this.xrLabel26,
                        this.xrPictureBox1,
                        this.xrLabel23,
                        this.xrLabel22,
                        this.xrBarCode1,
                        this.xrLabel18,
                        this.xrLabel16,
                        this.xrLabel7,
                        this.xrLine2,
                        this.xrLabel6,
                        this.xrLabel3});
            this.PageHeader.Height = 575;
            this.PageHeader.Name = "PageHeader";
            // 
            // xrLine3
            // 
            this.xrLine3.Font = new System.Drawing.Font("Times New Roman", 9.75F);
            this.xrLine3.Location = new System.Drawing.Point(25, 56);
            this.xrLine3.Name = "xrLine3";
            this.xrLine3.Size = new System.Drawing.Size(750, 5);
            // 
            // xrLabel5
            // 
            this.xrLabel5.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.备注评价", "")});
            this.xrLabel5.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel5.Location = new System.Drawing.Point(158, 0);
            this.xrLabel5.Multiline = true;
            this.xrLabel5.Name = "xrLabel5";
            this.xrLabel5.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel5.Size = new System.Drawing.Size(617, 22);
            this.xrLabel5.Text = "xrLabel56";
            this.xrLabel5.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopLeft;
            // 
            // xrLabel24
            // 
            this.xrLabel24.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel24.Location = new System.Drawing.Point(17, 0);
            this.xrLabel24.Name = "xrLabel24";
            this.xrLabel24.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel24.Size = new System.Drawing.Size(142, 22);
            this.xrLabel24.StylePriority.UseTextAlignment = false;
            this.xrLabel24.Text = "评论(Comment)：";
            this.xrLabel24.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel35
            // 
            this.xrLabel35.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel35.Location = new System.Drawing.Point(17, 138);
            this.xrLabel35.Name = "xrLabel35";
            this.xrLabel35.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel35.Size = new System.Drawing.Size(225, 22);
            this.xrLabel35.StylePriority.UseTextAlignment = false;
            this.xrLabel35.Text = "接收时间(Time received)：";
            this.xrLabel35.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel12
            // 
            this.xrLabel12.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.标本签收时间", "")});
            this.xrLabel12.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel12.Location = new System.Drawing.Point(225, 138);
            this.xrLabel12.Name = "xrLabel12";
            this.xrLabel12.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel12.Size = new System.Drawing.Size(192, 22);
            this.xrLabel12.StylePriority.UseTextAlignment = false;
            this.xrLabel12.Text = "xrLabel12";
            this.xrLabel12.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel34
            // 
            this.xrLabel34.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel34.Location = new System.Drawing.Point(17, 167);
            this.xrLabel34.Name = "xrLabel34";
            this.xrLabel34.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel34.Size = new System.Drawing.Size(200, 22);
            this.xrLabel34.StylePriority.UseTextAlignment = false;
            this.xrLabel34.Text = "报告时间(Report time)：";
            this.xrLabel34.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel33
            // 
            this.xrLabel33.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.审核日期", "")});
            this.xrLabel33.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel33.Location = new System.Drawing.Point(217, 167);
            this.xrLabel33.Name = "xrLabel33";
            this.xrLabel33.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel33.Size = new System.Drawing.Size(200, 22);
            this.xrLabel33.StylePriority.UseTextAlignment = false;
            this.xrLabel33.Text = "xrLabel41";
            this.xrLabel33.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel9
            // 
            this.xrLabel9.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.标本采集时间", "")});
            this.xrLabel9.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel9.Location = new System.Drawing.Point(233, 107);
            this.xrLabel9.Name = "xrLabel9";
            this.xrLabel9.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel9.Size = new System.Drawing.Size(177, 22);
            this.xrLabel9.StylePriority.UseTextAlignment = false;
            this.xrLabel9.Text = "xrLabel62";
            this.xrLabel9.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLine1
            // 
            this.xrLine1.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold);
            this.xrLine1.Location = new System.Drawing.Point(17, 103);
            this.xrLine1.Name = "xrLine1";
            this.xrLine1.Size = new System.Drawing.Size(758, 2);
            // 
            // xrLabel70
            // 
            this.xrLabel70.Font = new System.Drawing.Font("Arial", 8F);
            this.xrLabel70.Location = new System.Drawing.Point(8, 73);
            this.xrLabel70.Multiline = true;
            this.xrLabel70.Name = "xrLabel70";
            this.xrLabel70.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel70.Size = new System.Drawing.Size(767, 33);
            this.xrLabel70.StylePriority.UseFont = false;
            this.xrLabel70.StylePriority.UseTextAlignment = false;
            this.xrLabel70.Text = "All laboratory reports must be interpreted according to clinical findings!   At t" +
                "he time of printing, the doctors may not have had the chance to review the resul" +
                "t of this report.\r\n";
            this.xrLabel70.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            // 
            // xrPictureBox2
            // 
            this.xrPictureBox2.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Image", null, "可设计字段.审核者图片", "")});
            this.xrPictureBox2.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrPictureBox2.Location = new System.Drawing.Point(558, 127);
            this.xrPictureBox2.Name = "xrPictureBox2";
            this.xrPictureBox2.Size = new System.Drawing.Size(125, 38);
            // 
            // xrLabel72
            // 
            this.xrLabel72.Font = new System.Drawing.Font("Times New Roman", 8F);
            this.xrLabel72.Location = new System.Drawing.Point(17, 213);
            this.xrLabel72.Multiline = true;
            this.xrLabel72.Name = "xrLabel72";
            this.xrLabel72.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel72.Size = new System.Drawing.Size(567, 17);
            this.xrLabel72.Text = "This report is just for clinical reference and  applies only to the sample submit" +
                "ted on the date of this report.";
            // 
            // xrLabel69
            // 
            this.xrLabel69.Location = new System.Drawing.Point(17, 58);
            this.xrLabel69.Multiline = true;
            this.xrLabel69.Name = "xrLabel69";
            this.xrLabel69.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel69.Size = new System.Drawing.Size(767, 25);
            this.xrLabel69.StylePriority.UseTextAlignment = false;
            this.xrLabel69.Text = "检验报告必须由负责医生结合临床资料进行评估！若自行领取此报告，流程上医生未必已审阅。\r\n";
            this.xrLabel69.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            // 
            // xrLabel68
            // 
            this.xrLabel68.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel68.Location = new System.Drawing.Point(17, 107);
            this.xrLabel68.Name = "xrLabel68";
            this.xrLabel68.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel68.Size = new System.Drawing.Size(225, 22);
            this.xrLabel68.StylePriority.UseTextAlignment = false;
            this.xrLabel68.Text = "采集时间(Time collected)：";
            this.xrLabel68.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel64
            // 
            this.xrLabel64.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.报告打印时间", "")});
            this.xrLabel64.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel64.Location = new System.Drawing.Point(612, 167);
            this.xrLabel64.Name = "xrLabel64";
            this.xrLabel64.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel64.Size = new System.Drawing.Size(162, 22);
            this.xrLabel64.Text = "xrLabel7";
            // 
            // xrLine7
            // 
            this.xrLine7.Font = new System.Drawing.Font("Times New Roman", 9.75F);
            this.xrLine7.Location = new System.Drawing.Point(17, 192);
            this.xrLine7.Name = "xrLine7";
            this.xrLine7.Size = new System.Drawing.Size(758, 2);
            // 
            // xrLabel63
            // 
            this.xrLabel63.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel63.Location = new System.Drawing.Point(417, 167);
            this.xrLabel63.Multiline = true;
            this.xrLabel63.Name = "xrLabel63";
            this.xrLabel63.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel63.Size = new System.Drawing.Size(217, 22);
            this.xrLabel63.StylePriority.UseTextAlignment = false;
            this.xrLabel63.Text = "打印时间(Printing time)：\r\n";
            this.xrLabel63.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel62
            // 
            this.xrLabel62.Font = new System.Drawing.Font("Times New Roman", 8F);
            this.xrLabel62.Location = new System.Drawing.Point(17, 196);
            this.xrLabel62.Name = "xrLabel62";
            this.xrLabel62.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel62.Size = new System.Drawing.Size(733, 16);
            this.xrLabel62.Text = "*本报告仅对本次送检标本负责,结果只供临床参考。";
            // 
            // xrLabel60
            // 
            this.xrLabel60.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel60.Location = new System.Drawing.Point(417, 138);
            this.xrLabel60.Name = "xrLabel60";
            this.xrLabel60.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel60.Size = new System.Drawing.Size(150, 22);
            this.xrLabel60.StylePriority.UseTextAlignment = false;
            this.xrLabel60.Text = "审核者(Verifier)：";
            this.xrLabel60.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel59
            // 
            this.xrLabel59.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel59.Location = new System.Drawing.Point(417, 107);
            this.xrLabel59.Name = "xrLabel59";
            this.xrLabel59.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel59.Size = new System.Drawing.Size(150, 22);
            this.xrLabel59.StylePriority.UseTextAlignment = false;
            this.xrLabel59.Text = "检验者(Examiner)：";
            this.xrLabel59.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel27
            // 
            this.xrLabel27.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.报告者", "")});
            this.xrLabel27.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel27.Location = new System.Drawing.Point(558, 107);
            this.xrLabel27.Name = "xrLabel27";
            this.xrLabel27.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel27.Size = new System.Drawing.Size(161, 22);
            this.xrLabel27.StylePriority.UseTextAlignment = false;
            this.xrLabel27.Text = "xrLabel37";
            this.xrLabel27.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel4
            // 
            this.xrLabel4.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.病区名", "")});
            this.xrLabel4.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel4.Location = new System.Drawing.Point(440, 89);
            this.xrLabel4.Name = "xrLabel4";
            this.xrLabel4.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel4.Size = new System.Drawing.Size(327, 22);
            this.xrLabel4.Text = "xrLabel4";
            // 
            // xrLabel1
            // 
            this.xrLabel1.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.组合名称", "")});
            this.xrLabel1.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel1.Location = new System.Drawing.Point(517, 152);
            this.xrLabel1.Name = "xrLabel1";
            this.xrLabel1.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel1.Size = new System.Drawing.Size(250, 22);
            this.xrLabel1.Text = "xrLabel1";
            this.xrLabel1.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopLeft;
            // 
            // xrLabel36
            // 
            this.xrLabel36.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel36.Location = new System.Drawing.Point(17, 242);
            this.xrLabel36.Name = "xrLabel36";
            this.xrLabel36.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel36.Size = new System.Drawing.Size(183, 22);
            this.xrLabel36.StylePriority.UseTextAlignment = false;
            this.xrLabel36.Text = "检验结果(Test result)：";
            this.xrLabel36.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel29
            // 
            this.xrLabel29.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel29.Location = new System.Drawing.Point(342, 131);
            this.xrLabel29.Multiline = true;
            this.xrLabel29.Name = "xrLabel29";
            this.xrLabel29.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel29.Size = new System.Drawing.Size(242, 22);
            this.xrLabel29.StylePriority.UseTextAlignment = false;
            this.xrLabel29.Text = "送检医生(Requesting doctor)：\r\n";
            this.xrLabel29.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel31
            // 
            this.xrLabel31.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel31.Location = new System.Drawing.Point(342, 173);
            this.xrLabel31.Name = "xrLabel31";
            this.xrLabel31.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel31.Size = new System.Drawing.Size(158, 22);
            this.xrLabel31.StylePriority.UseTextAlignment = false;
            this.xrLabel31.Text = "标本类别(Sample)：";
            this.xrLabel31.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel20
            // 
            this.xrLabel20.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel20.Location = new System.Drawing.Point(342, 152);
            this.xrLabel20.Name = "xrLabel20";
            this.xrLabel20.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel20.Size = new System.Drawing.Size(175, 22);
            this.xrLabel20.StylePriority.UseTextAlignment = false;
            this.xrLabel20.Text = "送检项目(Test items)：";
            this.xrLabel20.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel21
            // 
            this.xrLabel21.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel21.Location = new System.Drawing.Point(342, 89);
            this.xrLabel21.Name = "xrLabel21";
            this.xrLabel21.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel21.Size = new System.Drawing.Size(100, 22);
            this.xrLabel21.StylePriority.UseTextAlignment = false;
            this.xrLabel21.Text = "病区(Ward)：";
            this.xrLabel21.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel25
            // 
            this.xrLabel25.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel25.Location = new System.Drawing.Point(342, 195);
            this.xrLabel25.Name = "xrLabel25";
            this.xrLabel25.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel25.Size = new System.Drawing.Size(208, 22);
            this.xrLabel25.StylePriority.UseTextAlignment = false;
            this.xrLabel25.Text = "标本备注(Sample remark)：";
            this.xrLabel25.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel32
            // 
            this.xrLabel32.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel32.Location = new System.Drawing.Point(342, 110);
            this.xrLabel32.Name = "xrLabel32";
            this.xrLabel32.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel32.Size = new System.Drawing.Size(167, 22);
            this.xrLabel32.StylePriority.UseTextAlignment = false;
            this.xrLabel32.Text = "科室(Department)：";
            this.xrLabel32.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel19
            // 
            this.xrLabel19.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.唯一号", "")});
            this.xrLabel19.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel19.Location = new System.Drawing.Point(192, 173);
            this.xrLabel19.Name = "xrLabel19";
            this.xrLabel19.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel19.Size = new System.Drawing.Size(148, 22);
            this.xrLabel19.StylePriority.UseTextAlignment = false;
            this.xrLabel19.Text = "xrLabel17";
            this.xrLabel19.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel17
            // 
            this.xrLabel17.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel17.Location = new System.Drawing.Point(17, 89);
            this.xrLabel17.Name = "xrLabel17";
            this.xrLabel17.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel17.Size = new System.Drawing.Size(108, 22);
            this.xrLabel17.StylePriority.UseTextAlignment = false;
            this.xrLabel17.Text = "姓名(Name)：";
            this.xrLabel17.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel15
            // 
            this.xrLabel15.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel15.Location = new System.Drawing.Point(17, 110);
            this.xrLabel15.Name = "xrLabel15";
            this.xrLabel15.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel15.Size = new System.Drawing.Size(108, 22);
            this.xrLabel15.StylePriority.UseTextAlignment = false;
            this.xrLabel15.Text = "性别(Sex)：";
            this.xrLabel15.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel13
            // 
            this.xrLabel13.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel13.Location = new System.Drawing.Point(17, 131);
            this.xrLabel13.Name = "xrLabel13";
            this.xrLabel13.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel13.Size = new System.Drawing.Size(108, 22);
            this.xrLabel13.StylePriority.UseTextAlignment = false;
            this.xrLabel13.Text = "年龄(Age)：";
            this.xrLabel13.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel11
            // 
            this.xrLabel11.BorderColor = System.Drawing.SystemColors.ControlText;
            this.xrLabel11.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel11.Location = new System.Drawing.Point(17, 173);
            this.xrLabel11.Name = "xrLabel11";
            this.xrLabel11.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel11.Size = new System.Drawing.Size(183, 22);
            this.xrLabel11.StylePriority.UseBorderColor = false;
            this.xrLabel11.StylePriority.UseTextAlignment = false;
            this.xrLabel11.Text = "病人ID(Patient UPID)：";
            this.xrLabel11.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel10
            // 
            this.xrLabel10.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel10.Location = new System.Drawing.Point(17, 152);
            this.xrLabel10.Name = "xrLabel10";
            this.xrLabel10.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel10.Size = new System.Drawing.Size(125, 22);
            this.xrLabel10.StylePriority.UseTextAlignment = false;
            this.xrLabel10.Text = "床号(Bed No.)：";
            this.xrLabel10.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel8
            // 
            this.xrLabel8.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel8.Location = new System.Drawing.Point(17, 195);
            this.xrLabel8.Name = "xrLabel8";
            this.xrLabel8.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel8.Size = new System.Drawing.Size(158, 22);
            this.xrLabel8.StylePriority.UseTextAlignment = false;
            this.xrLabel8.Text = "标本条码(Lab No.)：";
            this.xrLabel8.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel2
            // 
            this.xrLabel2.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel2.Location = new System.Drawing.Point(17, 217);
            this.xrLabel2.Name = "xrLabel2";
            this.xrLabel2.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel2.Size = new System.Drawing.Size(158, 22);
            this.xrLabel2.StylePriority.UseTextAlignment = false;
            this.xrLabel2.Text = "诊断(Diagnosis)：";
            this.xrLabel2.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel14
            // 
            this.xrLabel14.BorderColor = System.Drawing.SystemColors.AppWorkspace;
            this.xrLabel14.Borders = ((DevExpress.XtraPrinting.BorderSide)((((DevExpress.XtraPrinting.BorderSide.Left | DevExpress.XtraPrinting.BorderSide.Top) 
                        | DevExpress.XtraPrinting.BorderSide.Right) 
                        | DevExpress.XtraPrinting.BorderSide.Bottom)));
            this.xrLabel14.Font = new System.Drawing.Font("Times New Roman", 10F, System.Drawing.FontStyle.Bold);
            this.xrLabel14.Location = new System.Drawing.Point(16, 442);
            this.xrLabel14.Multiline = true;
            this.xrLabel14.Name = "xrLabel14";
            this.xrLabel14.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel14.Size = new System.Drawing.Size(208, 42);
            this.xrLabel14.StylePriority.UseBorderColor = false;
            this.xrLabel14.StylePriority.UseBorders = false;
            this.xrLabel14.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopCenter;
            // 
            // xrPivotGrid1
            // 
            this.xrPivotGrid1.Appearance.Cell.Font = new System.Drawing.Font("Times New Roman", 8F);
            this.xrPivotGrid1.Appearance.Cell.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            this.xrPivotGrid1.Appearance.CustomTotalCell.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            this.xrPivotGrid1.Appearance.FieldHeader.BackColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.FieldHeader.BorderColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.FieldHeader.Font = new System.Drawing.Font("Times New Roman", 10F, System.Drawing.FontStyle.Bold);
            this.xrPivotGrid1.Appearance.FieldHeader.ForeColor = System.Drawing.Color.Black;
            this.xrPivotGrid1.Appearance.FieldHeader.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            this.xrPivotGrid1.Appearance.FieldValue.BackColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.FieldValue.BorderColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.FieldValue.Font = new System.Drawing.Font("Times New Roman", 8F, System.Drawing.FontStyle.Bold);
            this.xrPivotGrid1.Appearance.FieldValue.ForeColor = System.Drawing.Color.Black;
            this.xrPivotGrid1.Appearance.FieldValue.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            this.xrPivotGrid1.Appearance.FilterSeparator.BackColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.FilterSeparator.BorderColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.FilterSeparator.ForeColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.HeaderGroupLine.BackColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.HeaderGroupLine.BorderColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.HeaderGroupLine.ForeColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.Lines.BackColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.Lines.BorderColor = System.Drawing.Color.White;
            this.xrPivotGrid1.Appearance.Lines.ForeColor = System.Drawing.Color.White;
            this.xrPivotGrid1.DataMember = "可设计字段";
            this.xrPivotGrid1.DataSource = this.dataSet1;
            this.xrPivotGrid1.Fields.AddRange(new DevExpress.XtraPivotGrid.PivotGridField[] {
                        this.field110,
                        this.fieldMIC,
                        this.field60,
                        this.field61,
                        this.xrPivotGridField1});
            this.xrPivotGrid1.Location = new System.Drawing.Point(17, 442);
            this.xrPivotGrid1.Name = "xrPivotGrid1";
            this.xrPivotGrid1.OptionsDataField.RowHeaderWidth = 50;
            this.xrPivotGrid1.OptionsPrint.PrintColumnHeaders = DevExpress.Utils.DefaultBoolean.False;
            this.xrPivotGrid1.OptionsPrint.PrintDataHeaders = DevExpress.Utils.DefaultBoolean.False;
            this.xrPivotGrid1.OptionsPrint.PrintFilterHeaders = DevExpress.Utils.DefaultBoolean.False;
            this.xrPivotGrid1.OptionsPrint.PrintHeadersOnEveryPage = true;
            this.xrPivotGrid1.OptionsPrint.PrintHorzLines = DevExpress.Utils.DefaultBoolean.True;
            this.xrPivotGrid1.OptionsPrint.PrintRowHeaders = DevExpress.Utils.DefaultBoolean.True;
            this.xrPivotGrid1.OptionsPrint.PrintVertLines = DevExpress.Utils.DefaultBoolean.True;
            this.xrPivotGrid1.OptionsView.ShowColumnGrandTotals = false;
            this.xrPivotGrid1.OptionsView.ShowColumnHeaders = false;
            this.xrPivotGrid1.OptionsView.ShowColumnTotals = false;
            this.xrPivotGrid1.OptionsView.ShowCustomTotalsForSingleValues = true;
            this.xrPivotGrid1.OptionsView.ShowDataHeaders = false;
            this.xrPivotGrid1.OptionsView.ShowFilterHeaders = false;
            this.xrPivotGrid1.OptionsView.ShowGrandTotalsForSingleValues = true;
            this.xrPivotGrid1.OptionsView.ShowRowGrandTotals = false;
            this.xrPivotGrid1.OptionsView.ShowRowHeaders = false;
            this.xrPivotGrid1.OptionsView.ShowRowTotals = false;
            this.xrPivotGrid1.OptionsView.ShowTotalsForSingleValues = true;
            this.xrPivotGrid1.OptionsView.ShowVertLines = false;
            this.xrPivotGrid1.Size = new System.Drawing.Size(308, 108);
            // 
            // xrLabel73
            // 
            this.xrLabel73.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.涂片结果与外观", "")});
            this.xrLabel73.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel73.Location = new System.Drawing.Point(17, 267);
            this.xrLabel73.Multiline = true;
            this.xrLabel73.Name = "xrLabel73";
            this.xrLabel73.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel73.Size = new System.Drawing.Size(750, 102);
            this.xrLabel73.Text = "xrLabel73";
            this.xrLabel73.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopLeft;
            // 
            // xrLabel56
            // 
            this.xrLabel56.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.姓名", "")});
            this.xrLabel56.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel56.Location = new System.Drawing.Point(117, 89);
            this.xrLabel56.Name = "xrLabel56";
            this.xrLabel56.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel56.Size = new System.Drawing.Size(224, 22);
            this.xrLabel56.StylePriority.UseTextAlignment = false;
            this.xrLabel56.Text = "xrLabel5";
            this.xrLabel56.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel54
            // 
            this.xrLabel54.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.性别", "")});
            this.xrLabel54.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel54.Location = new System.Drawing.Point(108, 110);
            this.xrLabel54.Name = "xrLabel54";
            this.xrLabel54.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel54.Size = new System.Drawing.Size(224, 22);
            this.xrLabel54.StylePriority.UseTextAlignment = false;
            this.xrLabel54.Text = "xrLabel7";
            this.xrLabel54.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel52
            // 
            this.xrLabel52.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.年龄", "")});
            this.xrLabel52.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel52.Location = new System.Drawing.Point(108, 131);
            this.xrLabel52.Name = "xrLabel52";
            this.xrLabel52.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel52.Size = new System.Drawing.Size(225, 22);
            this.xrLabel52.StylePriority.UseTextAlignment = false;
            this.xrLabel52.Text = "xrLabel9";
            this.xrLabel52.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel50
            // 
            this.xrLabel50.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.科室名称", "")});
            this.xrLabel50.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel50.Location = new System.Drawing.Point(483, 110);
            this.xrLabel50.Name = "xrLabel50";
            this.xrLabel50.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel50.Size = new System.Drawing.Size(283, 22);
            this.xrLabel50.StylePriority.UseTextAlignment = false;
            this.xrLabel50.Text = "xrLabel13";
            this.xrLabel50.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel47
            // 
            this.xrLabel47.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.标本类别", "")});
            this.xrLabel47.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel47.Location = new System.Drawing.Point(483, 173);
            this.xrLabel47.Name = "xrLabel47";
            this.xrLabel47.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel47.Size = new System.Drawing.Size(283, 22);
            this.xrLabel47.StylePriority.UseTextAlignment = false;
            this.xrLabel47.Text = "xrLabel2";
            this.xrLabel47.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel44
            // 
            this.xrLabel44.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.唯一号", "")});
            this.xrLabel44.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel44.Location = new System.Drawing.Point(582, 11);
            this.xrLabel44.Name = "xrLabel44";
            this.xrLabel44.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel44.Size = new System.Drawing.Size(108, 22);
            this.xrLabel44.StylePriority.UseTextAlignment = false;
            this.xrLabel44.Text = "xrLabel17";
            this.xrLabel44.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            // 
            // xrLabel40
            // 
            this.xrLabel40.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.床号", "")});
            this.xrLabel40.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel40.Location = new System.Drawing.Point(133, 152);
            this.xrLabel40.Name = "xrLabel40";
            this.xrLabel40.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel40.Size = new System.Drawing.Size(198, 22);
            this.xrLabel40.Text = "xrLabel57";
            this.xrLabel40.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopLeft;
            // 
            // xrLabel30
            // 
            this.xrLabel30.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.医生姓名", "")});
            this.xrLabel30.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel30.Location = new System.Drawing.Point(567, 131);
            this.xrLabel30.Name = "xrLabel30";
            this.xrLabel30.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel30.Size = new System.Drawing.Size(200, 22);
            this.xrLabel30.StylePriority.UseTextAlignment = false;
            this.xrLabel30.Text = "xrLabel27";
            this.xrLabel30.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLine4
            // 
            this.xrLine4.Font = new System.Drawing.Font("Times New Roman", 9.75F);
            this.xrLine4.Location = new System.Drawing.Point(17, 83);
            this.xrLine4.Name = "xrLine4";
            this.xrLine4.Size = new System.Drawing.Size(750, 5);
            // 
            // xrLabel26
            // 
            this.xrLabel26.CanGrow = false;
            this.xrLabel26.Font = new System.Drawing.Font("Microsoft Sans Serif", 20F, System.Drawing.FontStyle.Bold);
            this.xrLabel26.Location = new System.Drawing.Point(258, 8);
            this.xrLabel26.Name = "xrLabel26";
            this.xrLabel26.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel26.Size = new System.Drawing.Size(267, 48);
            this.xrLabel26.StylePriority.UseFont = false;
            this.xrLabel26.Text = "香港大学深圳医院";
            this.xrLabel26.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopCenter;
            // 
            // xrPictureBox1
            // 
            this.xrPictureBox1.Image = ((System.Drawing.Image)(resources.GetObject("xrPictureBox1.Image")));
            this.xrPictureBox1.Location = new System.Drawing.Point(117, 17);
            this.xrPictureBox1.Name = "xrPictureBox1";
            this.xrPictureBox1.Size = new System.Drawing.Size(99, 67);
            this.xrPictureBox1.Sizing = DevExpress.XtraPrinting.ImageSizeMode.StretchImage;
            // 
            // xrLabel23
            // 
            this.xrLabel23.Font = new System.Drawing.Font("Times New Roman", 9.75F, System.Drawing.FontStyle.Bold);
            this.xrLabel23.Location = new System.Drawing.Point(242, 50);
            this.xrLabel23.Name = "xrLabel23";
            this.xrLabel23.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel23.Size = new System.Drawing.Size(300, 17);
            this.xrLabel23.Text = "The University of HongKong-Shenzhen Hospital";
            this.xrLabel23.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopCenter;
            // 
            // xrLabel22
            // 
            this.xrLabel22.Font = new System.Drawing.Font("Times New Roman", 9.75F, System.Drawing.FontStyle.Bold);
            this.xrLabel22.Location = new System.Drawing.Point(258, 67);
            this.xrLabel22.Name = "xrLabel22";
            this.xrLabel22.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel22.Size = new System.Drawing.Size(242, 25);
            this.xrLabel22.Text = "检验报告单( Laboratory Report)";
            this.xrLabel22.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopCenter;
            // 
            // xrBarCode1
            // 
            this.xrBarCode1.BackColor = System.Drawing.Color.Transparent;
            this.xrBarCode1.BorderColor = System.Drawing.SystemColors.ControlText;
            this.xrBarCode1.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.xrBarCode1.BorderWidth = 3;
            this.xrBarCode1.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.唯一号", "")});
            this.xrBarCode1.Font = new System.Drawing.Font("Times New Roman", 8F);
            this.xrBarCode1.ForeColor = System.Drawing.SystemColors.ControlText;
            this.xrBarCode1.Location = new System.Drawing.Point(563, 33);
            this.xrBarCode1.Module = 1F;
            this.xrBarCode1.Name = "xrBarCode1";
            this.xrBarCode1.PaddingInfo = new DevExpress.XtraPrinting.PaddingInfo(0, 0, 0, 0, 100F);
            this.xrBarCode1.ShowText = false;
            this.xrBarCode1.Size = new System.Drawing.Size(150, 52);
            this.xrBarCode1.StylePriority.UseBackColor = false;
            this.xrBarCode1.StylePriority.UseBorderWidth = false;
            this.xrBarCode1.StylePriority.UsePadding = false;
            this.xrBarCode1.StylePriority.UseTextAlignment = false;
            this.xrBarCode1.Symbology = code128Generator1;
            this.xrBarCode1.TextAlignment = DevExpress.XtraPrinting.TextAlignment.BottomCenter;
            // 
            // xrLabel18
            // 
            this.xrLabel18.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.条码号", "")});
            this.xrLabel18.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel18.Location = new System.Drawing.Point(167, 195);
            this.xrLabel18.Name = "xrLabel18";
            this.xrLabel18.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel18.Size = new System.Drawing.Size(175, 22);
            this.xrLabel18.StylePriority.UseTextAlignment = false;
            this.xrLabel18.Text = "xrLabel50";
            this.xrLabel18.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel16
            // 
            this.xrLabel16.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.诊断", "")});
            this.xrLabel16.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold);
            this.xrLabel16.Location = new System.Drawing.Point(158, 217);
            this.xrLabel16.Name = "xrLabel16";
            this.xrLabel16.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel16.Size = new System.Drawing.Size(608, 22);
            this.xrLabel16.StylePriority.UseTextAlignment = false;
            this.xrLabel16.Text = "xrLabel16";
            this.xrLabel16.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel7
            // 
            this.xrLabel7.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.标本备注", "")});
            this.xrLabel7.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel7.Location = new System.Drawing.Point(533, 195);
            this.xrLabel7.Name = "xrLabel7";
            this.xrLabel7.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel7.Size = new System.Drawing.Size(233, 22);
            this.xrLabel7.StylePriority.UseTextAlignment = false;
            this.xrLabel7.Text = "xrLabel54";
            this.xrLabel7.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLine2
            // 
            this.xrLine2.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold);
            this.xrLine2.Location = new System.Drawing.Point(17, 236);
            this.xrLine2.Name = "xrLine2";
            this.xrLine2.Size = new System.Drawing.Size(750, 2);
            // 
            // xrLabel6
            // 
            this.xrLabel6.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel6.Location = new System.Drawing.Point(17, 375);
            this.xrLabel6.Name = "xrLabel6";
            this.xrLabel6.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel6.Size = new System.Drawing.Size(142, 22);
            this.xrLabel6.StylePriority.UseTextAlignment = false;
            this.xrLabel6.Text = "培养(Culture)：";
            this.xrLabel6.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // xrLabel3
            // 
            this.xrLabel3.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "可设计字段.菌名及数量", "")});
            this.xrLabel3.Font = new System.Drawing.Font("宋体", 11F, System.Drawing.FontStyle.Bold);
            this.xrLabel3.Location = new System.Drawing.Point(17, 396);
            this.xrLabel3.Multiline = true;
            this.xrLabel3.Name = "xrLabel3";
            this.xrLabel3.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.xrLabel3.Size = new System.Drawing.Size(750, 22);
            this.xrLabel3.Text = "xrLabel3";
            // 
            // dataSet1
            // 
            this.dataSet1.DataSetName = "dataSet1";
            // 
            // field110
            // 
            this.field110.Area = DevExpress.XtraPivotGrid.PivotArea.DataArea;
            this.field110.AreaIndex = 1;
            this.field110.Caption = "ST";
            this.field110.FieldName = "敏感度";
            this.field110.Name = "field110";
            this.field110.SummaryType = DevExpress.Data.PivotGrid.PivotSummaryType.Min;
            this.field110.TotalsVisibility = DevExpress.XtraPivotGrid.PivotTotalsVisibility.None;
            this.field110.Width = 30;
            // 
            // fieldMIC
            // 
            this.fieldMIC.Area = DevExpress.XtraPivotGrid.PivotArea.DataArea;
            this.fieldMIC.AreaIndex = 0;
            this.fieldMIC.Caption = "MIC";
            this.fieldMIC.FieldName = "MIC值";
            this.fieldMIC.Name = "fieldMIC";
            this.fieldMIC.SummaryType = DevExpress.Data.PivotGrid.PivotSummaryType.Min;
            this.fieldMIC.TotalsVisibility = DevExpress.XtraPivotGrid.PivotTotalsVisibility.None;
            this.fieldMIC.Width = 32;
            // 
            // field60
            // 
            this.field60.Area = DevExpress.XtraPivotGrid.PivotArea.RowArea;
            this.field60.AreaIndex = 0;
            this.field60.Caption = "抗生素(Antibiotics)";
            this.field60.FieldName = "抗生素中英文名称";
            this.field60.Name = "field60";
            this.field60.Width = 198;
            // 
            // field61
            // 
            this.field61.Area = DevExpress.XtraPivotGrid.PivotArea.ColumnArea;
            this.field61.AreaIndex = 1;
            this.field61.Caption = "菌(Organism)";
            this.field61.FieldName = "a细菌代号";
            this.field61.Name = "field61";
            // 
            // xrPivotGridField1
            // 
            this.xrPivotGridField1.Area = DevExpress.XtraPivotGrid.PivotArea.ColumnArea;
            this.xrPivotGridField1.AreaIndex = 0;
            this.xrPivotGridField1.Caption = "aaaaa";
            this.xrPivotGridField1.FieldName = "test";
            this.xrPivotGridField1.Name = "xrPivotGridField1";
            // 
            // xrControlStyle1
            // 
            this.xrControlStyle1.Name = "xrControlStyle1";
            // 
            // xtraReport11
            // 
            this.Bands.AddRange(new DevExpress.XtraReports.UI.Band[] {
                        this.Detail,
                        this.PageFooter,
                        this.PageHeader});
            this.BorderColor = System.Drawing.SystemColors.ButtonFace;
            this.DataSource = this.dataSet1;
            this.Margins = new System.Drawing.Printing.Margins(20, 20, 10, 10);
            this.Name = "xtraReport11";
            this.PageHeight = 1169;
            this.PageWidth = 827;
            this.PaperKind = System.Drawing.Printing.PaperKind.A4;
            this.StyleSheet.AddRange(new DevExpress.XtraReports.UI.XRControlStyle[] {
                        this.xrControlStyle1});
            this.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            this.Version = "8.2";
            ((System.ComponentModel.ISupportInitialize)(this.dataSet1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this)).EndInit();
        }
    }
}
namespace XtraReportSerialization {
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dataSet1 : global::System.Data.DataSet {
        private 可设计字段DataTable table可设计字段;
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["可设计字段"] != null)) {
                    base.Tables.Add(new 可设计字段DataTable(ds.Tables["可设计字段"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 可设计字段DataTable 可设计字段 {
            get {
                return this.table可设计字段;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dataSet1 cln = ((dataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["可设计字段"] != null)) {
                    base.Tables.Add(new 可设计字段DataTable(ds.Tables["可设计字段"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table可设计字段 = ((可设计字段DataTable)(base.Tables["可设计字段"]));
            if ((initTable == true)) {
                if ((this.table可设计字段 != null)) {
                    this.table可设计字段.InitVars();
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dataSet1";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.table可设计字段 = new 可设计字段DataTable();
            base.Tables.Add(this.table可设计字段);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize可设计字段() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dataSet1 ds = new dataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        public delegate void 可设计字段RowChangeEventHandler(object sender, 可设计字段RowChangeEvent e);
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 可设计字段DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            private global::System.Data.DataColumn column标识ID;
            private global::System.Data.DataColumn columntest;
            private global::System.Data.DataColumn columna细菌代号;
            private global::System.Data.DataColumn column菌名及数量;
            private global::System.Data.DataColumn column涂片功能名称;
            private global::System.Data.DataColumn column涂片功能结果;
            private global::System.Data.DataColumn column样本号;
            private global::System.Data.DataColumn column姓名;
            private global::System.Data.DataColumn column性别;
            private global::System.Data.DataColumn column年龄;
            private global::System.Data.DataColumn column年龄单位;
            private global::System.Data.DataColumn column病人ID;
            private global::System.Data.DataColumn column就诊次数;
            private global::System.Data.DataColumn column床号;
            private global::System.Data.DataColumn column诊断;
            private global::System.Data.DataColumn column单位;
            private global::System.Data.DataColumn column唯一号;
            private global::System.Data.DataColumn columnID标识;
            private global::System.Data.DataColumn column组合名称;
            private global::System.Data.DataColumn column检查目的编码;
            private global::System.Data.DataColumn column检验者代码;
            private global::System.Data.DataColumn columnpat_chk_code;
            private global::System.Data.DataColumn column发送者;
            private global::System.Data.DataColumn columnpat_report_code;
            private global::System.Data.DataColumn column发送标志;
            private global::System.Data.DataColumn column打印标志;
            private global::System.Data.DataColumn column状态;
            private global::System.Data.DataColumn column注意事项;
            private global::System.Data.DataColumn column传染病上报标志;
            private global::System.Data.DataColumn column危机值标志;
            private global::System.Data.DataColumn columnpat_look_code;
            private global::System.Data.DataColumn column涂片结果与外观;
            private global::System.Data.DataColumn column输入ID;
            private global::System.Data.DataColumn column录入日期;
            private global::System.Data.DataColumn column申请时间old;
            private global::System.Data.DataColumn column送检日期;
            private global::System.Data.DataColumn column审核日期;
            private global::System.Data.DataColumn column报告日期;
            private global::System.Data.DataColumn column发送日期;
            private global::System.Data.DataColumn column查看日期;
            private global::System.Data.DataColumn column医保卡号;
            private global::System.Data.DataColumn column体检ID;
            private global::System.Data.DataColumn column条码号;
            private global::System.Data.DataColumn column序号;
            private global::System.Data.DataColumn column标本采集时间;
            private global::System.Data.DataColumn column标本签收时间;
            private global::System.Data.DataColumn column申请时间;
            private global::System.Data.DataColumn column检验时间;
            private global::System.Data.DataColumn column报告打印时间;
            private global::System.Data.DataColumn column病人ID类型;
            private global::System.Data.DataColumn column仪器检测信息;
            private global::System.Data.DataColumn column处理意见;
            private global::System.Data.DataColumn column标本状态;
            private global::System.Data.DataColumn column标本备注;
            private global::System.Data.DataColumn column报告者;
            private global::System.Data.DataColumn column审核者;
            private global::System.Data.DataColumn column仪器默认审核者;
            private global::System.Data.DataColumn column报告最终审核者;
            private global::System.Data.DataColumn column病区名;
            private global::System.Data.DataColumn column病区名1;
            private global::System.Data.DataColumn column仪器代码;
            private global::System.Data.DataColumn column病人来源;
            private global::System.Data.DataColumn column仪器名称;
            private global::System.Data.DataColumn column标本类别;
            private global::System.Data.DataColumn column科室名称;
            private global::System.Data.DataColumn column组别名称;
            private global::System.Data.DataColumn column标识类型;
            private global::System.Data.DataColumn column医生姓名;
            private global::System.Data.DataColumn column细菌编码;
            private global::System.Data.DataColumn column抗生素编码;
            private global::System.Data.DataColumn column敏感度;
            private global::System.Data.DataColumn column敏感度1;
            private global::System.Data.DataColumn columnMIC值;
            private global::System.Data.DataColumn column抑菌圈;
            private global::System.Data.DataColumn column抗生素英文名称;
            private global::System.Data.DataColumn column抗生素名称;
            private global::System.Data.DataColumn column抗生素中英文名称;
            private global::System.Data.DataColumn column细菌ID;
            private global::System.Data.DataColumn column细菌名称;
            private global::System.Data.DataColumn column条码ID;
            private global::System.Data.DataColumn column医生名称;
            private global::System.Data.DataColumn column检查目的;
            private global::System.Data.DataColumn column菌落记数;
            private global::System.Data.DataColumn column细菌备注;
            private global::System.Data.DataColumn column检验者图片;
            private global::System.Data.DataColumn column审核者图片;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 可设计字段DataTable() {
                this.TableName = "可设计字段";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 可设计字段DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 可设计字段DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 标识IDColumn {
                get {
                    return this.column标识ID;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn testColumn {
                get {
                    return this.columntest;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn a细菌代号Column {
                get {
                    return this.columna细菌代号;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 菌名及数量Column {
                get {
                    return this.column菌名及数量;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 涂片功能名称Column {
                get {
                    return this.column涂片功能名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 涂片功能结果Column {
                get {
                    return this.column涂片功能结果;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 样本号Column {
                get {
                    return this.column样本号;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 性别Column {
                get {
                    return this.column性别;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 年龄Column {
                get {
                    return this.column年龄;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 年龄单位Column {
                get {
                    return this.column年龄单位;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 病人IDColumn {
                get {
                    return this.column病人ID;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 就诊次数Column {
                get {
                    return this.column就诊次数;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 床号Column {
                get {
                    return this.column床号;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 诊断Column {
                get {
                    return this.column诊断;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 单位Column {
                get {
                    return this.column单位;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 唯一号Column {
                get {
                    return this.column唯一号;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID标识Column {
                get {
                    return this.columnID标识;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 组合名称Column {
                get {
                    return this.column组合名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检查目的编码Column {
                get {
                    return this.column检查目的编码;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检验者代码Column {
                get {
                    return this.column检验者代码;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pat_chk_codeColumn {
                get {
                    return this.columnpat_chk_code;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 发送者Column {
                get {
                    return this.column发送者;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pat_report_codeColumn {
                get {
                    return this.columnpat_report_code;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 发送标志Column {
                get {
                    return this.column发送标志;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 打印标志Column {
                get {
                    return this.column打印标志;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 状态Column {
                get {
                    return this.column状态;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 注意事项Column {
                get {
                    return this.column注意事项;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 传染病上报标志Column {
                get {
                    return this.column传染病上报标志;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 危机值标志Column {
                get {
                    return this.column危机值标志;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pat_look_codeColumn {
                get {
                    return this.columnpat_look_code;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 涂片结果与外观Column {
                get {
                    return this.column涂片结果与外观;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 输入IDColumn {
                get {
                    return this.column输入ID;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 录入日期Column {
                get {
                    return this.column录入日期;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 申请时间oldColumn {
                get {
                    return this.column申请时间old;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 送检日期Column {
                get {
                    return this.column送检日期;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 审核日期Column {
                get {
                    return this.column审核日期;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 报告日期Column {
                get {
                    return this.column报告日期;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 发送日期Column {
                get {
                    return this.column发送日期;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 查看日期Column {
                get {
                    return this.column查看日期;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 医保卡号Column {
                get {
                    return this.column医保卡号;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 体检IDColumn {
                get {
                    return this.column体检ID;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 条码号Column {
                get {
                    return this.column条码号;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 标本采集时间Column {
                get {
                    return this.column标本采集时间;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 标本签收时间Column {
                get {
                    return this.column标本签收时间;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 申请时间Column {
                get {
                    return this.column申请时间;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检验时间Column {
                get {
                    return this.column检验时间;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 报告打印时间Column {
                get {
                    return this.column报告打印时间;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 病人ID类型Column {
                get {
                    return this.column病人ID类型;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 仪器检测信息Column {
                get {
                    return this.column仪器检测信息;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 处理意见Column {
                get {
                    return this.column处理意见;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 标本状态Column {
                get {
                    return this.column标本状态;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 标本备注Column {
                get {
                    return this.column标本备注;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 报告者Column {
                get {
                    return this.column报告者;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 审核者Column {
                get {
                    return this.column审核者;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 仪器默认审核者Column {
                get {
                    return this.column仪器默认审核者;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 报告最终审核者Column {
                get {
                    return this.column报告最终审核者;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 病区名Column {
                get {
                    return this.column病区名;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 病区名1Column {
                get {
                    return this.column病区名1;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 仪器代码Column {
                get {
                    return this.column仪器代码;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 病人来源Column {
                get {
                    return this.column病人来源;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 仪器名称Column {
                get {
                    return this.column仪器名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 标本类别Column {
                get {
                    return this.column标本类别;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 科室名称Column {
                get {
                    return this.column科室名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 组别名称Column {
                get {
                    return this.column组别名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 标识类型Column {
                get {
                    return this.column标识类型;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 医生姓名Column {
                get {
                    return this.column医生姓名;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 细菌编码Column {
                get {
                    return this.column细菌编码;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 抗生素编码Column {
                get {
                    return this.column抗生素编码;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 敏感度Column {
                get {
                    return this.column敏感度;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 敏感度1Column {
                get {
                    return this.column敏感度1;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIC值Column {
                get {
                    return this.columnMIC值;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 抑菌圈Column {
                get {
                    return this.column抑菌圈;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 抗生素英文名称Column {
                get {
                    return this.column抗生素英文名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 抗生素名称Column {
                get {
                    return this.column抗生素名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 抗生素中英文名称Column {
                get {
                    return this.column抗生素中英文名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 细菌IDColumn {
                get {
                    return this.column细菌ID;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 细菌名称Column {
                get {
                    return this.column细菌名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 条码IDColumn {
                get {
                    return this.column条码ID;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 医生名称Column {
                get {
                    return this.column医生名称;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检查目的Column {
                get {
                    return this.column检查目的;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 菌落记数Column {
                get {
                    return this.column菌落记数;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 细菌备注Column {
                get {
                    return this.column细菌备注;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检验者图片Column {
                get {
                    return this.column检验者图片;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 审核者图片Column {
                get {
                    return this.column审核者图片;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 可设计字段Row this[int index] {
                get {
                    return ((可设计字段Row)(this.Rows[index]));
                }
            }
            public event 可设计字段RowChangeEventHandler 可设计字段RowChanging;
            public event 可设计字段RowChangeEventHandler 可设计字段RowChanged;
            public event 可设计字段RowChangeEventHandler 可设计字段RowDeleting;
            public event 可设计字段RowChangeEventHandler 可设计字段RowDeleted;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add可设计字段Row(可设计字段Row row) {
                this.Rows.Add(row);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 可设计字段Row Add可设计字段Row(
                        string 标识ID, 
                        string test, 
                        string a细菌代号, 
                        string 菌名及数量, 
                        string 涂片功能名称, 
                        string 涂片功能结果, 
                        string 样本号, 
                        string 姓名, 
                        string 性别, 
                        string 年龄, 
                        string 年龄单位, 
                        string 病人ID, 
                        int 就诊次数, 
                        string 床号, 
                        string 诊断, 
                        string 单位, 
                        string 唯一号, 
                        string ID标识, 
                        string 组合名称, 
                        string 检查目的编码, 
                        string 检验者代码, 
                        string pat_chk_code, 
                        string 发送者, 
                        string pat_report_code, 
                        int 发送标志, 
                        int 打印标志, 
                        int 状态, 
                        string 注意事项, 
                        int 传染病上报标志, 
                        int 危机值标志, 
                        string pat_look_code, 
                        string 涂片结果与外观, 
                        string 输入ID, 
                        System.DateTime 录入日期, 
                        System.DateTime 申请时间old, 
                        System.DateTime 送检日期, 
                        System.DateTime 审核日期, 
                        System.DateTime 报告日期, 
                        System.DateTime 发送日期, 
                        System.DateTime 查看日期, 
                        string 医保卡号, 
                        string 体检ID, 
                        string 条码号, 
                        string 序号, 
                        System.DateTime 标本采集时间, 
                        System.DateTime 标本签收时间, 
                        System.DateTime 申请时间, 
                        System.DateTime 检验时间, 
                        System.DateTime 报告打印时间, 
                        string 病人ID类型, 
                        string 仪器检测信息, 
                        string 处理意见, 
                        string 标本状态, 
                        string 标本备注, 
                        string 报告者, 
                        string 审核者, 
                        string 仪器默认审核者, 
                        string 报告最终审核者, 
                        string 病区名, 
                        string 病区名1, 
                        string 仪器代码, 
                        string 病人来源, 
                        string 仪器名称, 
                        string 标本类别, 
                        string 科室名称, 
                        string 组别名称, 
                        string 标识类型, 
                        string 医生姓名, 
                        decimal 细菌编码, 
                        string 抗生素编码, 
                        string 敏感度, 
                        string 敏感度1, 
                        string MIC值, 
                        string 抑菌圈, 
                        string 抗生素英文名称, 
                        string 抗生素名称, 
                        string 抗生素中英文名称, 
                        string 细菌ID, 
                        string 细菌名称, 
                        string 条码ID, 
                        string 医生名称, 
                        string 检查目的, 
                        string 菌落记数, 
                        string 细菌备注, 
                        byte[] 检验者图片, 
                        byte[] 审核者图片) {
                可设计字段Row row可设计字段Row = ((可设计字段Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        标识ID,
                        test,
                        a细菌代号,
                        菌名及数量,
                        涂片功能名称,
                        涂片功能结果,
                        样本号,
                        姓名,
                        性别,
                        年龄,
                        年龄单位,
                        病人ID,
                        就诊次数,
                        床号,
                        诊断,
                        单位,
                        唯一号,
                        ID标识,
                        组合名称,
                        检查目的编码,
                        检验者代码,
                        pat_chk_code,
                        发送者,
                        pat_report_code,
                        发送标志,
                        打印标志,
                        状态,
                        注意事项,
                        传染病上报标志,
                        危机值标志,
                        pat_look_code,
                        涂片结果与外观,
                        输入ID,
                        录入日期,
                        申请时间old,
                        送检日期,
                        审核日期,
                        报告日期,
                        发送日期,
                        查看日期,
                        医保卡号,
                        体检ID,
                        条码号,
                        序号,
                        标本采集时间,
                        标本签收时间,
                        申请时间,
                        检验时间,
                        报告打印时间,
                        病人ID类型,
                        仪器检测信息,
                        处理意见,
                        标本状态,
                        标本备注,
                        报告者,
                        审核者,
                        仪器默认审核者,
                        报告最终审核者,
                        病区名,
                        病区名1,
                        仪器代码,
                        病人来源,
                        仪器名称,
                        标本类别,
                        科室名称,
                        组别名称,
                        标识类型,
                        医生姓名,
                        细菌编码,
                        抗生素编码,
                        敏感度,
                        敏感度1,
                        MIC值,
                        抑菌圈,
                        抗生素英文名称,
                        抗生素名称,
                        抗生素中英文名称,
                        细菌ID,
                        细菌名称,
                        条码ID,
                        医生名称,
                        检查目的,
                        菌落记数,
                        细菌备注,
                        检验者图片,
                        审核者图片};
                row可设计字段Row.ItemArray = columnValuesArray;
                this.Rows.Add(row可设计字段Row);
                return row可设计字段Row;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                可设计字段DataTable cln = ((可设计字段DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 可设计字段DataTable();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column标识ID = base.Columns["标识ID"];
                this.columntest = base.Columns["test"];
                this.columna细菌代号 = base.Columns["a细菌代号"];
                this.column菌名及数量 = base.Columns["菌名及数量"];
                this.column涂片功能名称 = base.Columns["涂片功能名称"];
                this.column涂片功能结果 = base.Columns["涂片功能结果"];
                this.column样本号 = base.Columns["样本号"];
                this.column姓名 = base.Columns["姓名"];
                this.column性别 = base.Columns["性别"];
                this.column年龄 = base.Columns["年龄"];
                this.column年龄单位 = base.Columns["年龄单位"];
                this.column病人ID = base.Columns["病人ID"];
                this.column就诊次数 = base.Columns["就诊次数"];
                this.column床号 = base.Columns["床号"];
                this.column诊断 = base.Columns["诊断"];
                this.column单位 = base.Columns["单位"];
                this.column唯一号 = base.Columns["唯一号"];
                this.columnID标识 = base.Columns["ID标识"];
                this.column组合名称 = base.Columns["组合名称"];
                this.column检查目的编码 = base.Columns["检查目的编码"];
                this.column检验者代码 = base.Columns["检验者代码"];
                this.columnpat_chk_code = base.Columns["pat_chk_code"];
                this.column发送者 = base.Columns["发送者"];
                this.columnpat_report_code = base.Columns["pat_report_code"];
                this.column发送标志 = base.Columns["发送标志"];
                this.column打印标志 = base.Columns["打印标志"];
                this.column状态 = base.Columns["状态"];
                this.column注意事项 = base.Columns["注意事项"];
                this.column传染病上报标志 = base.Columns["传染病上报标志"];
                this.column危机值标志 = base.Columns["危机值标志"];
                this.columnpat_look_code = base.Columns["pat_look_code"];
                this.column涂片结果与外观 = base.Columns["涂片结果与外观"];
                this.column输入ID = base.Columns["输入ID"];
                this.column录入日期 = base.Columns["录入日期"];
                this.column申请时间old = base.Columns["申请时间old"];
                this.column送检日期 = base.Columns["送检日期"];
                this.column审核日期 = base.Columns["审核日期"];
                this.column报告日期 = base.Columns["报告日期"];
                this.column发送日期 = base.Columns["发送日期"];
                this.column查看日期 = base.Columns["查看日期"];
                this.column医保卡号 = base.Columns["医保卡号"];
                this.column体检ID = base.Columns["体检ID"];
                this.column条码号 = base.Columns["条码号"];
                this.column序号 = base.Columns["序号"];
                this.column标本采集时间 = base.Columns["标本采集时间"];
                this.column标本签收时间 = base.Columns["标本签收时间"];
                this.column申请时间 = base.Columns["申请时间"];
                this.column检验时间 = base.Columns["检验时间"];
                this.column报告打印时间 = base.Columns["报告打印时间"];
                this.column病人ID类型 = base.Columns["病人ID类型"];
                this.column仪器检测信息 = base.Columns["仪器检测信息"];
                this.column处理意见 = base.Columns["处理意见"];
                this.column标本状态 = base.Columns["标本状态"];
                this.column标本备注 = base.Columns["标本备注"];
                this.column报告者 = base.Columns["报告者"];
                this.column审核者 = base.Columns["审核者"];
                this.column仪器默认审核者 = base.Columns["仪器默认审核者"];
                this.column报告最终审核者 = base.Columns["报告最终审核者"];
                this.column病区名 = base.Columns["病区名"];
                this.column病区名1 = base.Columns["病区名1"];
                this.column仪器代码 = base.Columns["仪器代码"];
                this.column病人来源 = base.Columns["病人来源"];
                this.column仪器名称 = base.Columns["仪器名称"];
                this.column标本类别 = base.Columns["标本类别"];
                this.column科室名称 = base.Columns["科室名称"];
                this.column组别名称 = base.Columns["组别名称"];
                this.column标识类型 = base.Columns["标识类型"];
                this.column医生姓名 = base.Columns["医生姓名"];
                this.column细菌编码 = base.Columns["细菌编码"];
                this.column抗生素编码 = base.Columns["抗生素编码"];
                this.column敏感度 = base.Columns["敏感度"];
                this.column敏感度1 = base.Columns["敏感度1"];
                this.columnMIC值 = base.Columns["MIC值"];
                this.column抑菌圈 = base.Columns["抑菌圈"];
                this.column抗生素英文名称 = base.Columns["抗生素英文名称"];
                this.column抗生素名称 = base.Columns["抗生素名称"];
                this.column抗生素中英文名称 = base.Columns["抗生素中英文名称"];
                this.column细菌ID = base.Columns["细菌ID"];
                this.column细菌名称 = base.Columns["细菌名称"];
                this.column条码ID = base.Columns["条码ID"];
                this.column医生名称 = base.Columns["医生名称"];
                this.column检查目的 = base.Columns["检查目的"];
                this.column菌落记数 = base.Columns["菌落记数"];
                this.column细菌备注 = base.Columns["细菌备注"];
                this.column检验者图片 = base.Columns["检验者图片"];
                this.column审核者图片 = base.Columns["审核者图片"];
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column标识ID = new global::System.Data.DataColumn("标识ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column标识ID);
                this.columntest = new global::System.Data.DataColumn("test", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntest);
                this.columna细菌代号 = new global::System.Data.DataColumn("a细菌代号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columna细菌代号);
                this.column菌名及数量 = new global::System.Data.DataColumn("菌名及数量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column菌名及数量);
                this.column涂片功能名称 = new global::System.Data.DataColumn("涂片功能名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column涂片功能名称);
                this.column涂片功能结果 = new global::System.Data.DataColumn("涂片功能结果", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column涂片功能结果);
                this.column样本号 = new global::System.Data.DataColumn("样本号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column样本号);
                this.column姓名 = new global::System.Data.DataColumn("姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column姓名);
                this.column性别 = new global::System.Data.DataColumn("性别", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column性别);
                this.column年龄 = new global::System.Data.DataColumn("年龄", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column年龄);
                this.column年龄单位 = new global::System.Data.DataColumn("年龄单位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column年龄单位);
                this.column病人ID = new global::System.Data.DataColumn("病人ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column病人ID);
                this.column就诊次数 = new global::System.Data.DataColumn("就诊次数", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column就诊次数);
                this.column床号 = new global::System.Data.DataColumn("床号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column床号);
                this.column诊断 = new global::System.Data.DataColumn("诊断", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column诊断);
                this.column单位 = new global::System.Data.DataColumn("单位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column单位);
                this.column唯一号 = new global::System.Data.DataColumn("唯一号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column唯一号);
                this.columnID标识 = new global::System.Data.DataColumn("ID标识", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID标识);
                this.column组合名称 = new global::System.Data.DataColumn("组合名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column组合名称);
                this.column检查目的编码 = new global::System.Data.DataColumn("检查目的编码", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检查目的编码);
                this.column检验者代码 = new global::System.Data.DataColumn("检验者代码", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检验者代码);
                this.columnpat_chk_code = new global::System.Data.DataColumn("pat_chk_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpat_chk_code);
                this.column发送者 = new global::System.Data.DataColumn("发送者", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column发送者);
                this.columnpat_report_code = new global::System.Data.DataColumn("pat_report_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpat_report_code);
                this.column发送标志 = new global::System.Data.DataColumn("发送标志", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column发送标志);
                this.column打印标志 = new global::System.Data.DataColumn("打印标志", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column打印标志);
                this.column状态 = new global::System.Data.DataColumn("状态", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column状态);
                this.column注意事项 = new global::System.Data.DataColumn("注意事项", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column注意事项);
                this.column传染病上报标志 = new global::System.Data.DataColumn("传染病上报标志", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column传染病上报标志);
                this.column危机值标志 = new global::System.Data.DataColumn("危机值标志", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column危机值标志);
                this.columnpat_look_code = new global::System.Data.DataColumn("pat_look_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpat_look_code);
                this.column涂片结果与外观 = new global::System.Data.DataColumn("涂片结果与外观", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column涂片结果与外观);
                this.column输入ID = new global::System.Data.DataColumn("输入ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column输入ID);
                this.column录入日期 = new global::System.Data.DataColumn("录入日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column录入日期);
                this.column申请时间old = new global::System.Data.DataColumn("申请时间old", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column申请时间old);
                this.column送检日期 = new global::System.Data.DataColumn("送检日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column送检日期);
                this.column审核日期 = new global::System.Data.DataColumn("审核日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column审核日期);
                this.column报告日期 = new global::System.Data.DataColumn("报告日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column报告日期);
                this.column发送日期 = new global::System.Data.DataColumn("发送日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column发送日期);
                this.column查看日期 = new global::System.Data.DataColumn("查看日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column查看日期);
                this.column医保卡号 = new global::System.Data.DataColumn("医保卡号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column医保卡号);
                this.column体检ID = new global::System.Data.DataColumn("体检ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column体检ID);
                this.column条码号 = new global::System.Data.DataColumn("条码号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column条码号);
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column标本采集时间 = new global::System.Data.DataColumn("标本采集时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column标本采集时间);
                this.column标本签收时间 = new global::System.Data.DataColumn("标本签收时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column标本签收时间);
                this.column申请时间 = new global::System.Data.DataColumn("申请时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column申请时间);
                this.column检验时间 = new global::System.Data.DataColumn("检验时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检验时间);
                this.column报告打印时间 = new global::System.Data.DataColumn("报告打印时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column报告打印时间);
                this.column病人ID类型 = new global::System.Data.DataColumn("病人ID类型", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column病人ID类型);
                this.column仪器检测信息 = new global::System.Data.DataColumn("仪器检测信息", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column仪器检测信息);
                this.column处理意见 = new global::System.Data.DataColumn("处理意见", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column处理意见);
                this.column标本状态 = new global::System.Data.DataColumn("标本状态", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column标本状态);
                this.column标本备注 = new global::System.Data.DataColumn("标本备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column标本备注);
                this.column报告者 = new global::System.Data.DataColumn("报告者", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column报告者);
                this.column审核者 = new global::System.Data.DataColumn("审核者", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column审核者);
                this.column仪器默认审核者 = new global::System.Data.DataColumn("仪器默认审核者", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column仪器默认审核者);
                this.column报告最终审核者 = new global::System.Data.DataColumn("报告最终审核者", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column报告最终审核者);
                this.column病区名 = new global::System.Data.DataColumn("病区名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column病区名);
                this.column病区名1 = new global::System.Data.DataColumn("病区名1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column病区名1);
                this.column仪器代码 = new global::System.Data.DataColumn("仪器代码", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column仪器代码);
                this.column病人来源 = new global::System.Data.DataColumn("病人来源", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column病人来源);
                this.column仪器名称 = new global::System.Data.DataColumn("仪器名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column仪器名称);
                this.column标本类别 = new global::System.Data.DataColumn("标本类别", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column标本类别);
                this.column科室名称 = new global::System.Data.DataColumn("科室名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column科室名称);
                this.column组别名称 = new global::System.Data.DataColumn("组别名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column组别名称);
                this.column标识类型 = new global::System.Data.DataColumn("标识类型", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column标识类型);
                this.column医生姓名 = new global::System.Data.DataColumn("医生姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column医生姓名);
                this.column细菌编码 = new global::System.Data.DataColumn("细菌编码", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column细菌编码);
                this.column抗生素编码 = new global::System.Data.DataColumn("抗生素编码", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column抗生素编码);
                this.column敏感度 = new global::System.Data.DataColumn("敏感度", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column敏感度);
                this.column敏感度1 = new global::System.Data.DataColumn("敏感度1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column敏感度1);
                this.columnMIC值 = new global::System.Data.DataColumn("MIC值", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIC值);
                this.column抑菌圈 = new global::System.Data.DataColumn("抑菌圈", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column抑菌圈);
                this.column抗生素英文名称 = new global::System.Data.DataColumn("抗生素英文名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column抗生素英文名称);
                this.column抗生素名称 = new global::System.Data.DataColumn("抗生素名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column抗生素名称);
                this.column抗生素中英文名称 = new global::System.Data.DataColumn("抗生素中英文名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column抗生素中英文名称);
                this.column细菌ID = new global::System.Data.DataColumn("细菌ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column细菌ID);
                this.column细菌名称 = new global::System.Data.DataColumn("细菌名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column细菌名称);
                this.column条码ID = new global::System.Data.DataColumn("条码ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column条码ID);
                this.column医生名称 = new global::System.Data.DataColumn("医生名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column医生名称);
                this.column检查目的 = new global::System.Data.DataColumn("检查目的", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检查目的);
                this.column菌落记数 = new global::System.Data.DataColumn("菌落记数", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column菌落记数);
                this.column细菌备注 = new global::System.Data.DataColumn("细菌备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column细菌备注);
                this.column检验者图片 = new global::System.Data.DataColumn("检验者图片", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检验者图片);
                this.column审核者图片 = new global::System.Data.DataColumn("审核者图片", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column审核者图片);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 可设计字段Row New可设计字段Row() {
                return ((可设计字段Row)(this.NewRow()));
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 可设计字段Row(builder);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(可设计字段Row);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.可设计字段RowChanged != null)) {
                    this.可设计字段RowChanged(this, new 可设计字段RowChangeEvent(((可设计字段Row)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.可设计字段RowChanging != null)) {
                    this.可设计字段RowChanging(this, new 可设计字段RowChangeEvent(((可设计字段Row)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.可设计字段RowDeleted != null)) {
                    this.可设计字段RowDeleted(this, new 可设计字段RowChangeEvent(((可设计字段Row)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.可设计字段RowDeleting != null)) {
                    this.可设计字段RowDeleting(this, new 可设计字段RowChangeEvent(((可设计字段Row)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove可设计字段Row(可设计字段Row row) {
                this.Rows.Remove(row);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dataSet1 ds = new dataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "可设计字段DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 可设计字段Row : global::System.Data.DataRow {
            private 可设计字段DataTable table可设计字段;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 可设计字段Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table可设计字段 = ((可设计字段DataTable)(this.Table));
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 标识ID {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.标识IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“标识ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.标识IDColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string test {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.testColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“test”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.testColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string a细菌代号 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.a细菌代号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“a细菌代号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.a细菌代号Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 菌名及数量 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.菌名及数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“菌名及数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.菌名及数量Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 涂片功能名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.涂片功能名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“涂片功能名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.涂片功能名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 涂片功能结果 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.涂片功能结果Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“涂片功能结果”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.涂片功能结果Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 样本号 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.样本号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“样本号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.样本号Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 姓名 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.姓名Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 性别 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.性别Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“性别”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.性别Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 年龄 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.年龄Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“年龄”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.年龄Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 年龄单位 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.年龄单位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“年龄单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.年龄单位Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病人ID {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.病人IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“病人ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.病人IDColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 就诊次数 {
                get {
                    try {
                        return ((int)(this[this.table可设计字段.就诊次数Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“就诊次数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.就诊次数Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 床号 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.床号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“床号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.床号Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 诊断 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.诊断Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“诊断”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.诊断Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单位 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.单位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.单位Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 唯一号 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.唯一号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“唯一号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.唯一号Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID标识 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.ID标识Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“ID标识”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.ID标识Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 组合名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.组合名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“组合名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.组合名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 检查目的编码 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.检查目的编码Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“检查目的编码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.检查目的编码Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 检验者代码 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.检验者代码Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“检验者代码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.检验者代码Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pat_chk_code {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.pat_chk_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“pat_chk_code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.pat_chk_codeColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 发送者 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.发送者Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“发送者”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.发送者Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pat_report_code {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.pat_report_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“pat_report_code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.pat_report_codeColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 发送标志 {
                get {
                    try {
                        return ((int)(this[this.table可设计字段.发送标志Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“发送标志”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.发送标志Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 打印标志 {
                get {
                    try {
                        return ((int)(this[this.table可设计字段.打印标志Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“打印标志”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.打印标志Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 状态 {
                get {
                    try {
                        return ((int)(this[this.table可设计字段.状态Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“状态”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.状态Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 注意事项 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.注意事项Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“注意事项”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.注意事项Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 传染病上报标志 {
                get {
                    try {
                        return ((int)(this[this.table可设计字段.传染病上报标志Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“传染病上报标志”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.传染病上报标志Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 危机值标志 {
                get {
                    try {
                        return ((int)(this[this.table可设计字段.危机值标志Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“危机值标志”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.危机值标志Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pat_look_code {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.pat_look_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“pat_look_code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.pat_look_codeColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 涂片结果与外观 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.涂片结果与外观Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“涂片结果与外观”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.涂片结果与外观Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 输入ID {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.输入IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“输入ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.输入IDColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 录入日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.录入日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“录入日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.录入日期Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 申请时间old {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.申请时间oldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“申请时间old”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.申请时间oldColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 送检日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.送检日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“送检日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.送检日期Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 审核日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.审核日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“审核日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.审核日期Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 报告日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.报告日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“报告日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.报告日期Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 发送日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.发送日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“发送日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.发送日期Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 查看日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.查看日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“查看日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.查看日期Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 医保卡号 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.医保卡号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“医保卡号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.医保卡号Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 体检ID {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.体检IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“体检ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.体检IDColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 条码号 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.条码号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“条码号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.条码号Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 序号 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.序号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“序号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.序号Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 标本采集时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.标本采集时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“标本采集时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.标本采集时间Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 标本签收时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.标本签收时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“标本签收时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.标本签收时间Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 申请时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.申请时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“申请时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.申请时间Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 检验时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.检验时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“检验时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.检验时间Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 报告打印时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table可设计字段.报告打印时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“报告打印时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.报告打印时间Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病人ID类型 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.病人ID类型Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“病人ID类型”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.病人ID类型Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 仪器检测信息 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.仪器检测信息Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“仪器检测信息”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.仪器检测信息Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 处理意见 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.处理意见Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“处理意见”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.处理意见Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 标本状态 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.标本状态Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“标本状态”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.标本状态Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 标本备注 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.标本备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“标本备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.标本备注Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 报告者 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.报告者Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“报告者”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.报告者Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 审核者 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.审核者Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“审核者”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.审核者Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 仪器默认审核者 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.仪器默认审核者Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“仪器默认审核者”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.仪器默认审核者Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 报告最终审核者 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.报告最终审核者Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“报告最终审核者”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.报告最终审核者Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病区名 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.病区名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“病区名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.病区名Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病区名1 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.病区名1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“病区名1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.病区名1Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 仪器代码 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.仪器代码Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“仪器代码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.仪器代码Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病人来源 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.病人来源Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“病人来源”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.病人来源Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 仪器名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.仪器名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“仪器名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.仪器名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 标本类别 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.标本类别Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“标本类别”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.标本类别Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 科室名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.科室名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“科室名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.科室名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 组别名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.组别名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“组别名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.组别名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 标识类型 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.标识类型Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“标识类型”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.标识类型Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 医生姓名 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.医生姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“医生姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.医生姓名Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 细菌编码 {
                get {
                    try {
                        return ((decimal)(this[this.table可设计字段.细菌编码Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“细菌编码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.细菌编码Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 抗生素编码 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.抗生素编码Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“抗生素编码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.抗生素编码Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 敏感度 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.敏感度Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“敏感度”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.敏感度Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 敏感度1 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.敏感度1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“敏感度1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.敏感度1Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIC值 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.MIC值Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“MIC值”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.MIC值Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 抑菌圈 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.抑菌圈Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“抑菌圈”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.抑菌圈Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 抗生素英文名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.抗生素英文名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“抗生素英文名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.抗生素英文名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 抗生素名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.抗生素名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“抗生素名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.抗生素名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 抗生素中英文名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.抗生素中英文名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“抗生素中英文名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.抗生素中英文名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 细菌ID {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.细菌IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“细菌ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.细菌IDColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 细菌名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.细菌名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“细菌名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.细菌名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 条码ID {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.条码IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“条码ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.条码IDColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 医生名称 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.医生名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“医生名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.医生名称Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 检查目的 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.检查目的Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“检查目的”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.检查目的Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 菌落记数 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.菌落记数Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“菌落记数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.菌落记数Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 细菌备注 {
                get {
                    try {
                        return ((string)(this[this.table可设计字段.细菌备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“细菌备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.细菌备注Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] 检验者图片 {
                get {
                    try {
                        return ((byte[])(this[this.table可设计字段.检验者图片Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“检验者图片”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.检验者图片Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] 审核者图片 {
                get {
                    try {
                        return ((byte[])(this[this.table可设计字段.审核者图片Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“可设计字段”中列“审核者图片”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table可设计字段.审核者图片Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is标识IDNull() {
                return this.IsNull(this.table可设计字段.标识IDColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set标识IDNull() {
                this[this.table可设计字段.标识IDColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstestNull() {
                return this.IsNull(this.table可设计字段.testColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettestNull() {
                this[this.table可设计字段.testColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isa细菌代号Null() {
                return this.IsNull(this.table可设计字段.a细菌代号Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Seta细菌代号Null() {
                this[this.table可设计字段.a细菌代号Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is菌名及数量Null() {
                return this.IsNull(this.table可设计字段.菌名及数量Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set菌名及数量Null() {
                this[this.table可设计字段.菌名及数量Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is涂片功能名称Null() {
                return this.IsNull(this.table可设计字段.涂片功能名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set涂片功能名称Null() {
                this[this.table可设计字段.涂片功能名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is涂片功能结果Null() {
                return this.IsNull(this.table可设计字段.涂片功能结果Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set涂片功能结果Null() {
                this[this.table可设计字段.涂片功能结果Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is样本号Null() {
                return this.IsNull(this.table可设计字段.样本号Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set样本号Null() {
                this[this.table可设计字段.样本号Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is姓名Null() {
                return this.IsNull(this.table可设计字段.姓名Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set姓名Null() {
                this[this.table可设计字段.姓名Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is性别Null() {
                return this.IsNull(this.table可设计字段.性别Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set性别Null() {
                this[this.table可设计字段.性别Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is年龄Null() {
                return this.IsNull(this.table可设计字段.年龄Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set年龄Null() {
                this[this.table可设计字段.年龄Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is年龄单位Null() {
                return this.IsNull(this.table可设计字段.年龄单位Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set年龄单位Null() {
                this[this.table可设计字段.年龄单位Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病人IDNull() {
                return this.IsNull(this.table可设计字段.病人IDColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病人IDNull() {
                this[this.table可设计字段.病人IDColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is就诊次数Null() {
                return this.IsNull(this.table可设计字段.就诊次数Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set就诊次数Null() {
                this[this.table可设计字段.就诊次数Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is床号Null() {
                return this.IsNull(this.table可设计字段.床号Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set床号Null() {
                this[this.table可设计字段.床号Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is诊断Null() {
                return this.IsNull(this.table可设计字段.诊断Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set诊断Null() {
                this[this.table可设计字段.诊断Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is单位Null() {
                return this.IsNull(this.table可设计字段.单位Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set单位Null() {
                this[this.table可设计字段.单位Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is唯一号Null() {
                return this.IsNull(this.table可设计字段.唯一号Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set唯一号Null() {
                this[this.table可设计字段.唯一号Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID标识Null() {
                return this.IsNull(this.table可设计字段.ID标识Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID标识Null() {
                this[this.table可设计字段.ID标识Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is组合名称Null() {
                return this.IsNull(this.table可设计字段.组合名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set组合名称Null() {
                this[this.table可设计字段.组合名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检查目的编码Null() {
                return this.IsNull(this.table可设计字段.检查目的编码Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检查目的编码Null() {
                this[this.table可设计字段.检查目的编码Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检验者代码Null() {
                return this.IsNull(this.table可设计字段.检验者代码Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检验者代码Null() {
                this[this.table可设计字段.检验者代码Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispat_chk_codeNull() {
                return this.IsNull(this.table可设计字段.pat_chk_codeColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpat_chk_codeNull() {
                this[this.table可设计字段.pat_chk_codeColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is发送者Null() {
                return this.IsNull(this.table可设计字段.发送者Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set发送者Null() {
                this[this.table可设计字段.发送者Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispat_report_codeNull() {
                return this.IsNull(this.table可设计字段.pat_report_codeColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpat_report_codeNull() {
                this[this.table可设计字段.pat_report_codeColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is发送标志Null() {
                return this.IsNull(this.table可设计字段.发送标志Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set发送标志Null() {
                this[this.table可设计字段.发送标志Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is打印标志Null() {
                return this.IsNull(this.table可设计字段.打印标志Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set打印标志Null() {
                this[this.table可设计字段.打印标志Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is状态Null() {
                return this.IsNull(this.table可设计字段.状态Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set状态Null() {
                this[this.table可设计字段.状态Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is注意事项Null() {
                return this.IsNull(this.table可设计字段.注意事项Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set注意事项Null() {
                this[this.table可设计字段.注意事项Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is传染病上报标志Null() {
                return this.IsNull(this.table可设计字段.传染病上报标志Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set传染病上报标志Null() {
                this[this.table可设计字段.传染病上报标志Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is危机值标志Null() {
                return this.IsNull(this.table可设计字段.危机值标志Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set危机值标志Null() {
                this[this.table可设计字段.危机值标志Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispat_look_codeNull() {
                return this.IsNull(this.table可设计字段.pat_look_codeColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpat_look_codeNull() {
                this[this.table可设计字段.pat_look_codeColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is涂片结果与外观Null() {
                return this.IsNull(this.table可设计字段.涂片结果与外观Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set涂片结果与外观Null() {
                this[this.table可设计字段.涂片结果与外观Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is输入IDNull() {
                return this.IsNull(this.table可设计字段.输入IDColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set输入IDNull() {
                this[this.table可设计字段.输入IDColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is录入日期Null() {
                return this.IsNull(this.table可设计字段.录入日期Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set录入日期Null() {
                this[this.table可设计字段.录入日期Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is申请时间oldNull() {
                return this.IsNull(this.table可设计字段.申请时间oldColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set申请时间oldNull() {
                this[this.table可设计字段.申请时间oldColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is送检日期Null() {
                return this.IsNull(this.table可设计字段.送检日期Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set送检日期Null() {
                this[this.table可设计字段.送检日期Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is审核日期Null() {
                return this.IsNull(this.table可设计字段.审核日期Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set审核日期Null() {
                this[this.table可设计字段.审核日期Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is报告日期Null() {
                return this.IsNull(this.table可设计字段.报告日期Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set报告日期Null() {
                this[this.table可设计字段.报告日期Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is发送日期Null() {
                return this.IsNull(this.table可设计字段.发送日期Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set发送日期Null() {
                this[this.table可设计字段.发送日期Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is查看日期Null() {
                return this.IsNull(this.table可设计字段.查看日期Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set查看日期Null() {
                this[this.table可设计字段.查看日期Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is医保卡号Null() {
                return this.IsNull(this.table可设计字段.医保卡号Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set医保卡号Null() {
                this[this.table可设计字段.医保卡号Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is体检IDNull() {
                return this.IsNull(this.table可设计字段.体检IDColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set体检IDNull() {
                this[this.table可设计字段.体检IDColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is条码号Null() {
                return this.IsNull(this.table可设计字段.条码号Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set条码号Null() {
                this[this.table可设计字段.条码号Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is序号Null() {
                return this.IsNull(this.table可设计字段.序号Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set序号Null() {
                this[this.table可设计字段.序号Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is标本采集时间Null() {
                return this.IsNull(this.table可设计字段.标本采集时间Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set标本采集时间Null() {
                this[this.table可设计字段.标本采集时间Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is标本签收时间Null() {
                return this.IsNull(this.table可设计字段.标本签收时间Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set标本签收时间Null() {
                this[this.table可设计字段.标本签收时间Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is申请时间Null() {
                return this.IsNull(this.table可设计字段.申请时间Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set申请时间Null() {
                this[this.table可设计字段.申请时间Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检验时间Null() {
                return this.IsNull(this.table可设计字段.检验时间Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检验时间Null() {
                this[this.table可设计字段.检验时间Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is报告打印时间Null() {
                return this.IsNull(this.table可设计字段.报告打印时间Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set报告打印时间Null() {
                this[this.table可设计字段.报告打印时间Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病人ID类型Null() {
                return this.IsNull(this.table可设计字段.病人ID类型Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病人ID类型Null() {
                this[this.table可设计字段.病人ID类型Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is仪器检测信息Null() {
                return this.IsNull(this.table可设计字段.仪器检测信息Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set仪器检测信息Null() {
                this[this.table可设计字段.仪器检测信息Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is处理意见Null() {
                return this.IsNull(this.table可设计字段.处理意见Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set处理意见Null() {
                this[this.table可设计字段.处理意见Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is标本状态Null() {
                return this.IsNull(this.table可设计字段.标本状态Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set标本状态Null() {
                this[this.table可设计字段.标本状态Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is标本备注Null() {
                return this.IsNull(this.table可设计字段.标本备注Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set标本备注Null() {
                this[this.table可设计字段.标本备注Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is报告者Null() {
                return this.IsNull(this.table可设计字段.报告者Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set报告者Null() {
                this[this.table可设计字段.报告者Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is审核者Null() {
                return this.IsNull(this.table可设计字段.审核者Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set审核者Null() {
                this[this.table可设计字段.审核者Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is仪器默认审核者Null() {
                return this.IsNull(this.table可设计字段.仪器默认审核者Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set仪器默认审核者Null() {
                this[this.table可设计字段.仪器默认审核者Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is报告最终审核者Null() {
                return this.IsNull(this.table可设计字段.报告最终审核者Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set报告最终审核者Null() {
                this[this.table可设计字段.报告最终审核者Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病区名Null() {
                return this.IsNull(this.table可设计字段.病区名Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病区名Null() {
                this[this.table可设计字段.病区名Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病区名1Null() {
                return this.IsNull(this.table可设计字段.病区名1Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病区名1Null() {
                this[this.table可设计字段.病区名1Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is仪器代码Null() {
                return this.IsNull(this.table可设计字段.仪器代码Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set仪器代码Null() {
                this[this.table可设计字段.仪器代码Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病人来源Null() {
                return this.IsNull(this.table可设计字段.病人来源Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病人来源Null() {
                this[this.table可设计字段.病人来源Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is仪器名称Null() {
                return this.IsNull(this.table可设计字段.仪器名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set仪器名称Null() {
                this[this.table可设计字段.仪器名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is标本类别Null() {
                return this.IsNull(this.table可设计字段.标本类别Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set标本类别Null() {
                this[this.table可设计字段.标本类别Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is科室名称Null() {
                return this.IsNull(this.table可设计字段.科室名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set科室名称Null() {
                this[this.table可设计字段.科室名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is组别名称Null() {
                return this.IsNull(this.table可设计字段.组别名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set组别名称Null() {
                this[this.table可设计字段.组别名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is标识类型Null() {
                return this.IsNull(this.table可设计字段.标识类型Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set标识类型Null() {
                this[this.table可设计字段.标识类型Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is医生姓名Null() {
                return this.IsNull(this.table可设计字段.医生姓名Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set医生姓名Null() {
                this[this.table可设计字段.医生姓名Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is细菌编码Null() {
                return this.IsNull(this.table可设计字段.细菌编码Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set细菌编码Null() {
                this[this.table可设计字段.细菌编码Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is抗生素编码Null() {
                return this.IsNull(this.table可设计字段.抗生素编码Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set抗生素编码Null() {
                this[this.table可设计字段.抗生素编码Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is敏感度Null() {
                return this.IsNull(this.table可设计字段.敏感度Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set敏感度Null() {
                this[this.table可设计字段.敏感度Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is敏感度1Null() {
                return this.IsNull(this.table可设计字段.敏感度1Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set敏感度1Null() {
                this[this.table可设计字段.敏感度1Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIC值Null() {
                return this.IsNull(this.table可设计字段.MIC值Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIC值Null() {
                this[this.table可设计字段.MIC值Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is抑菌圈Null() {
                return this.IsNull(this.table可设计字段.抑菌圈Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set抑菌圈Null() {
                this[this.table可设计字段.抑菌圈Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is抗生素英文名称Null() {
                return this.IsNull(this.table可设计字段.抗生素英文名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set抗生素英文名称Null() {
                this[this.table可设计字段.抗生素英文名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is抗生素名称Null() {
                return this.IsNull(this.table可设计字段.抗生素名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set抗生素名称Null() {
                this[this.table可设计字段.抗生素名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is抗生素中英文名称Null() {
                return this.IsNull(this.table可设计字段.抗生素中英文名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set抗生素中英文名称Null() {
                this[this.table可设计字段.抗生素中英文名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is细菌IDNull() {
                return this.IsNull(this.table可设计字段.细菌IDColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set细菌IDNull() {
                this[this.table可设计字段.细菌IDColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is细菌名称Null() {
                return this.IsNull(this.table可设计字段.细菌名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set细菌名称Null() {
                this[this.table可设计字段.细菌名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is条码IDNull() {
                return this.IsNull(this.table可设计字段.条码IDColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set条码IDNull() {
                this[this.table可设计字段.条码IDColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is医生名称Null() {
                return this.IsNull(this.table可设计字段.医生名称Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set医生名称Null() {
                this[this.table可设计字段.医生名称Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检查目的Null() {
                return this.IsNull(this.table可设计字段.检查目的Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检查目的Null() {
                this[this.table可设计字段.检查目的Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is菌落记数Null() {
                return this.IsNull(this.table可设计字段.菌落记数Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set菌落记数Null() {
                this[this.table可设计字段.菌落记数Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is细菌备注Null() {
                return this.IsNull(this.table可设计字段.细菌备注Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set细菌备注Null() {
                this[this.table可设计字段.细菌备注Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检验者图片Null() {
                return this.IsNull(this.table可设计字段.检验者图片Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检验者图片Null() {
                this[this.table可设计字段.检验者图片Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is审核者图片Null() {
                return this.IsNull(this.table可设计字段.审核者图片Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set审核者图片Null() {
                this[this.table可设计字段.审核者图片Column] = global::System.Convert.DBNull;
            }
        }
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 可设计字段RowChangeEvent : global::System.EventArgs {
            private 可设计字段Row eventRow;
            private global::System.Data.DataRowAction eventAction;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 可设计字段RowChangeEvent(可设计字段Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 可设计字段Row Row {
                get {
                    return this.eventRow;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
